labels = c(paste("Without gains (N=", length(rr_repeats_genes_wide[rr_repeats_genes_wide$gained_genes_presence=="0",1]),")", sep=""), paste(">=1 gain (N=", length(rr_repeats_genes_wide[rr_repeats_genes_wide$gained_genes_presence=="1",1]),")", sep=""))) +
scale_y_continuous(name = "GC-content (%)",
limits = c(30,43)) +
xlab("") +
theme(panel.background = element_blank(),
axis.line = element_line(size = 0.2, colour = "gray"),
axis.title = element_text(size = 10),
axis.ticks = element_line(size = 0.25, colour = "gray"),
axis.text.x = element_blank(),
legend.text = element_text(size = 10),
legend.key=element_blank(),
legend.title = element_blank())
ggsave(filename = "figures/violin_gains.pdf",
ggarrange(gains_violin, ggarrange(gains_violin_gc + theme(legend.position = "none"), gains_violin_rec + theme(legend.position = "none"), violin_legend, ncol = 3), nrow = 2, heights = c(2,1), legend = "none"),
device = "pdf", height = 6, width = 9)
pairwise.wilcox.test(rr_repeats_genes_wide$gained_genes,rr_repeats_genes_wide$pos_group)
pairwise.wilcox.test(rr_repeats_genes_long_gain$gained_genes, rr_repeats_genes_long_gain$feature)
pairwise.wilcox.test(rr_repeats_genes_long_gain[rr_repeats_genes_long_gain$gained_genes_presence==0,]$feature, rr_repeats_genes_long_gain[rr_repeats_genes_long_gain$gained_genes_presence==1,]$feature)
rr_repeats_genes_long_gain[rr_repeats_genes_long_gain$gained_genes_presence==0,]$feature
rr_repeats_genes_long_gain
pairwise.wilcox.test(rr_repeats_genes_long_gain[rr_repeats_genes_long_gain$gained_genes_presence==0,]$occ_length, rr_repeats_genes_long_gain[rr_repeats_genes_long_gain$gained_genes_presence==1,]$occ_length)
wilcox.test(rr_repeats_genes_wide$occ_length_CDS~rr_repeats_genes_wide$gained_genes_presence)
wilcox.test(rr_repeats_genes_wide$occ_length_gc~rr_repeats_genes_wide$gained_genes_presence)
wilcox.test(rr_repeats_genes_wide$occ_length_LTR~rr_repeats_genes_wide$gained_genes_presence)
wilcox.test(rr_repeats_genes_wide$occ_length_LINE~rr_repeats_genes_wide$gained_genes_presence)
wilcox.test(rr_repeats_genes_wide$occ_length_SINE~rr_repeats_genes_wide$gained_genes_presence)
wilcox.test(rr_repeats_genes_wide$occ_length_DNA~rr_repeats_genes_wide$gained_genes_presence)
wilcox.test(rr_repeats_genes_wide$wind_2mb~rr_repeats_genes_wide$gained_genes_presence)
knitr::opts_chunk$set(echo = TRUE)
plot_title="after_50_iter_noimprove_poss_inv_new"
map_for_HiC=read.table("order_all_int_noimprove_filt_poss_inv_uniq_new.txt")
file_name_rearr="order_all_int_noimprove_filt_poss_inv_uniq_new_rearr.txt"
head(map_for_HiC)
str(map_for_HiC)
map_for_HiC$V1 <- as.factor(map_for_HiC$V1)
#rearrange maps so all positive slope
map_for_HiC$V3 <- as.numeric(map_for_HiC$V3)
for (lg in unique(map_for_HiC$V3)){
map_temp <- map_for_HiC[map_for_HiC$V3==lg,]
if (coef(lm(map_temp$V5~map_temp$V2))[2]<0){
map_temp$V5 <- max(map_temp$V5) - map_temp$V5
map_temp$V6 <- max(map_temp$V6) - map_temp$V6
}
if (lg==1){
map_rearr <- map_temp
} else {
map_rearr <- rbind(map_rearr, map_temp)
}
}
map_rearr$V3 <- as.factor(map_rearr$V3)
map_rearr$V1 <- as.factor(map_rearr$V1)
swe_map <- read.table("order_all_int_noimprove_filt_poss_inv_uniq_new_rearr.txt", header=T)
swe_map <- read.table("07_LepMak3r_noradtag_swe_211216/order_all_int_noimprove_filt_poss_inv_uniq_new_rearr.txt", header=T)
#maps sorted after scaffold
ggplot(swe_map) +
#geom_point() +
geom_linerange(data=swe_map, mapping=aes(x=V2/1000000, ymin=V5*100/184, ymax=V6*100/184, colour=V7), size=0.2) +
geom_point(data=swe_map, mapping=aes(x=V2/1000000, y=V5*100/184, colour=V7), size=0.5) +
geom_point(data=swe_map, mapping=aes(x=V2/1000000, y=V6*100/184, colour=V7), size=0.5) +
facet_wrap(~swe_map$V8, scales="free") +
scale_colour_manual(values = c("grey14", "red", "blue", "light blue", "orange", "dark green")) +
guides(colour=FALSE) +
labs(title = plot_title) +
xlab("Position (Mb)") +
ylab("Distance (cM)") +
theme_classic()
swe_map$V7 <- as.factor(swe_map$V7)
#maps sorted after scaffold
ggplot(swe_map) +
#geom_point() +
geom_linerange(data=swe_map, mapping=aes(x=V2/1000000, ymin=V5*100/184, ymax=V6*100/184, colour=V7), size=0.2) +
geom_point(data=swe_map, mapping=aes(x=V2/1000000, y=V5*100/184, colour=V7), size=0.5) +
geom_point(data=swe_map, mapping=aes(x=V2/1000000, y=V6*100/184, colour=V7), size=0.5) +
facet_wrap(~swe_map$V8, scales="free") +
scale_colour_manual(values = c("grey14", "red", "blue", "light blue", "orange", "dark green")) +
guides(colour=FALSE) +
labs(title = plot_title) +
xlab("Position (Mb)") +
ylab("Distance (cM)") +
theme_classic()
knitr::opts_chunk$set(echo = TRUE)
plot_title="cat_eval_after_50_iter_mod"
map_for_HiC=read.table("order_all_int_filt_mod.txt")
file_name_rearr="order_all_int_filt_mod_rearr.txt"
head(map_for_HiC)
str(map_for_HiC)
#if interval >20, mark for removal
#map_for_HiC$V7 <-1
map_for_HiC[(map_for_HiC$V6-map_for_HiC$V5) > 20,7]=0
map_for_HiC$V7 <- as.factor(map_for_HiC$V7)
map_for_HiC$V1 <- as.factor(map_for_HiC$V1)
#rearrange maps so all positive slope
map_for_HiC$V3 <- as.numeric(map_for_HiC$V3)
for (lg in unique(map_for_HiC$V3)){
map_temp <- map_for_HiC[map_for_HiC$V3==lg,]
if (coef(lm(map_temp$V5~map_temp$V2))[2]<0){
map_temp$V5 <- max(map_temp$V5) - map_temp$V5
map_temp$V6 <- max(map_temp$V6) - map_temp$V6
}
if (lg==1){
map_rearr <- map_temp
} else {
map_rearr <- rbind(map_rearr, map_temp)
}
}
map_rearr$V3 <- as.factor(map_rearr$V3)
map_rearr$V1 <- as.factor(map_rearr$V1)
Mode <- function(x, na.rm = FALSE) {
if(na.rm){
x = x[!is.na(x)]
}
ux <- unique(x)
return(ux[which.max(tabulate(match(x, ux)))])
}
#add the most common scaffold per lg
lg_to_sc <- as.data.frame(aggregate(V1~V3, FUN=Mode, data=map_rearr))
colnames(lg_to_sc) <- c("V3", "V8")
#add to df
map_rearr <- left_join(map_rearr, lg_to_sc)
map_rearr
lg_to_sc <- as.data.frame(aggregate(V1~V3, FUN=Mode, data=map_rearr))
colnames(lg_to_sc) <- c("V3", "V8")
#add to df
map_rearr <- left_join(map_rearr, lg_to_sc)
write.table(map_rearr, file = file_name_rearr, quote = FALSE, row.names = FALSE)
cat_map <- read.table("Lepmap_211220_cat/order_all_int_filt_mod_rearr.txt", header=T)
cat_map$V7 <- as.factor(cat_map$V7)
#maps sorted after scaffold
plot_title="Catalonian linkage map"
ggplot(cat_map) +
#geom_point() +
geom_linerange(data=cat_map, mapping=aes(x=V2/1000000, ymin=V5*100/184, ymax=V6*100/184, colour=V7), size=0.2) +
geom_point(data=cat_map, mapping=aes(x=V2/1000000, y=V5*100/184, colour=V7), size=0.5) +
geom_point(data=cat_map, mapping=aes(x=V2/1000000, y=V6*100/184, colour=V7), size=0.5) +
facet_wrap(~cat_map$V8, scales="free") +
scale_colour_manual(values = c("grey14", "red", "blue", "light blue", "orange", "dark green")) +
guides(colour=FALSE) +
labs(title = plot_title) +
xlab("Position (Mb)") +
ylab("Distance (cM)") +
theme_classic()
head(swe_map)
swe_map$V9 <- (swe_map$V5+swe_map$V6)/2
head(swe_map)
swe_map$V9 <- ((swe_map$V5+swe_map$V6)/2)*100/184
head(swe_map)
ggplot(swe_map) +
#geom_point() +
geom_linerange(data=swe_map, mapping=aes(x=V2/1000000, ymin=V5*100/184, ymax=V6*100/184, colour=V7), size=0.2) +
geom_point(data=swe_map, mapping=aes(x=V2/1000000, y=V5*100/184, colour=V7), size=0.5) +
geom_point(data=swe_map, mapping=aes(x=V2/1000000, y=V6*100/184, colour=V7), size=0.5) +
facet_wrap(~swe_map$V8, scales="free") +
scale_colour_manual(values = c("grey14", "red", "blue", "light blue", "orange", "dark green")) +
guides(colour=FALSE) +
labs(title = plot_title) +
xlab("Position (Mb)") +
ylab("Distance (cM)") +
theme_classic()
print("Map length per LG min and max")
#cbind(aggregate(map_ordered$distance_min, list(map_ordered$lg), max), aggregate(map_ordered$distance_max, list(map_ordered$lg), max))
aggregate(swe_map$V9, list(swe_map$V8), max)
paste("Total map length (cM): ",sum(aggregate(swe_map$V9, list(swe_map$V8), max)$x))
paste("Appr recombination rate (cM/Mb):", sum(aggregate(swe_map$V9, list(swe_map$V8), max)$x)/sum(aggregate(swe_map$V2, list(swe_map$V1), max)$x)*1000000)
paste("Result for:", plot_title)
#Number of markers in map
paste("Number of markers in LG:", length(cat_map$V2))
apply(cat_map[c("V3")], 2, table)
apply(cat_map[c("V1")], 2, table)
cat_map$V9 <- ((cat_map$V5+cat_map$V6)/2)*100/184
#maplength
print("Map length per LG min and max")
#cbind(aggregate(map_ordered$distance_min, list(map_ordered$lg), max), aggregate(map_ordered$distance_max, list(map_ordered$lg), max))
aggregate(cat_map$V9, list(cat_map$V8), max)
paste("Total map length (cM): ",sum(aggregate(cat_map$V9, list(cat_map$V8), max)$x))
paste("Appr recombination rate (cM/Mb):", sum(aggregate(cat_map$V9, list(cat_map$V8), max)$x)/sum(aggregate(cat_map$V2, list(cat_map$V1), max)$x)*1000000)
list(cat_map$V8)
unique(cat_map$V8)
unique(cat_map$V1)
unique(swe_map$V8)
aggregate(cat_map$V9, list(cat_map$V8), max)
aggregate(swe_map$V9, list(swe_map$V8), max)
boxplot(aggregate(cat_map$V9, list(cat_map$V8), max)$x, aggregate(swe_map$V9, list(swe_map$V8), max))
boxplot(aggregate(cat_map$V9, list(cat_map$V8), max)$x, aggregate(swe_map$V9, list(swe_map$V8), max)$x)
cat_map$V9 <- ((cat_map$V5+cat_map$V6)/2)*100/178
boxplot(aggregate(cat_map$V9, list(cat_map$V8), max)$x, aggregate(swe_map$V9, list(swe_map$V8), max)$x)
ggplot() +
geom_boxplot(aes(aggregate(cat_map$V9, list(cat_map$V8), max)$x, aggregate(swe_map$V9, list(swe_map$V8), max)$x))
rec_rate_comp <- aggregate(cat_map$V9, list(cat_map$V8), max)
rec_rate_comp
rec_rate_comp$Group.1 <- paste("cat_", rec_rate_comp$Group.1, sep="")
rec_rate_comp
rec_rate_comp <- aggregate(cat_map$V9, list(cat_map$V8), max)
rec_rate_comp$pop <- "cat"
rec_rate_comp
rec_rate_comp_tmp <- aggregate(swe_map$V9, list(swe_map$V8), max)
rec_rate_comp_tmp$pop <- "swe"
cbind(rec_rate_comp, rec_rate_comp_temp)
cbind(rec_rate_comp, rec_rate_comp_tmp)
rbind(rec_rate_comp, rec_rate_comp_tmp)
rec_rate_comp <- rbind(rec_rate_comp, rec_rate_comp_tmp)
ggplot(rec_rate_comp) +
geom_boxplot(aes(x, pop))
ggplot(rec_rate_comp) +
geom_boxplot(aes(pop, x))
aggregate(cat_map$V2, list(cat_map$V1), max)$x
aggregate(cat_map$V2, list(cat_map$V1), max)
rec_rate_comp$rec_rate <- rec_rate_comp$x/aggregate(cat_map$V2, list(cat_map$V1), max)$x
rec_rate_comp <- aggregate(cat_map$V9, list(cat_map$V8), max)
rec_rate_comp$pop <- "cat"
rec_rate_comp$rec_rate <- rec_rate_comp$x/aggregate(cat_map$V2, list(cat_map$V1), max)$x
rec_rate_comp_tmp <- aggregate(swe_map$V9, list(swe_map$V8), max)
rec_rate_comp_tmp$pop <- "swe"
rec_rate_comp_tmp$rec_rate <- rec_rate_comp$x/aggregate(swe_map$V2, list(swe_map$V1), max)$x
rec_rate_comp_tmp
aggregate(swe_map$V2, list(swe_map$V1), max)
rec_rate_comp <- aggregate(cat_map$V9, list(cat_map$V8), max)
rec_rate_comp$pop <- "cat"
rec_rate_comp$rec_rate <- rec_rate_comp$x/aggregate(cat_map$V2, list(cat_map$V1), max)$x
rec_rate_comp_tmp <- aggregate(swe_map$V9, list(swe_map$V8), max)
rec_rate_comp_tmp$pop <- "swe"
rec_rate_comp_tmp$rec_rate <- rec_rate_comp_tmp$x/aggregate(swe_map$V2, list(swe_map$V1), max)$x
rec_rate_comp <- rbind(rec_rate_comp, rec_rate_comp_tmp)
rec_rate_comp
ggplot(rec_rate_comp) +
geom_boxplot(aes(pop, rec_rate))
ggplot(rec_rate_comp) +
geom_boxplot(aes(pop, rec_rate*1000000)) +
scale_y_continuous(limits = c(0,13))
aggregate(cat_map$V9, list(cat_map$V8), max)
paste("Total map length (cM): ",sum(aggregate(cat_map$V9, list(cat_map$V8), max)$x))
paste("Total map length (cM): ",sum(aggregate(swe_map$V9, list(swe_map$V8), max)$x))
paste("Appr recombination rate (cM/Mb):", sum(aggregate(cat_map$V9, list(cat_map$V8), max)$x)/sum(aggregate(cat_map$V2, list(cat_map$V1), max)$x)*1000000)
ggplot(rec_rate_comp) +
geom_boxplot(aes(pop, rec_rate*1000000)) +
stat_compare_means()
ggplot(rec_rate_comp) +
geom_boxplot(aes(pop, rec_rate*1000000)) +
stat_compare_means(method = "wilcox")
ggplot(rec_rate_comp) +
geom_boxplot(aes(pop, rec_rate*1000000)) +
stat_compare_means(paste("Appr recombination rate (cM/Mb):", sum(aggregate(cat_map$V9, list(cat_map$V8), max)$x)/sum(aggregate(cat_map$V2, list(cat_map$V1), max)$x)*1000000)
, method = "wilcox")
ggplot(rec_rate_comp) +
geom_boxplot(aes(pop, rec_rate*1000000)) +
stat_compare_means(aes(pop, rec_rate), method = "wilcox")
ggplot(rec_rate_comp) +
geom_boxplot(aes(pop, rec_rate*1000000)) +
stat_compare_means(aes(pop, rec_rate), method = "wilcox") +
scale_y_continuous(limits = c(0,13)) +
theme_classic()
ggplot(rec_rate_comp) +
geom_boxplot(aes(pop, rec_rate*1000000)) +
stat_compare_means(aes(pop, rec_rate), method = "wilcox",label.x.npc = "center") +
scale_y_continuous(limits = c(0,13)) +
theme_classic()
ggplot(rec_rate_comp) +
geom_boxplot(aes(pop, rec_rate*1000000), fill=pop) +
stat_compare_means(aes(pop, rec_rate), method = "wilcox",label.x.npc = "center") +
scale_y_continuous(limits = c(0,13)) +
theme_classic()
ggplot(rec_rate_comp) +
geom_boxplot(aes(pop, rec_rate*1000000, fill=pop)) +
stat_compare_means(aes(pop, rec_rate), method = "wilcox",label.x.npc = "center") +
scale_y_continuous(limits = c(0,13)) +
theme_classic()
ggplot(rec_rate_comp) +
geom_boxplot(aes(pop, rec_rate*1000000, fill=pop)) +
stat_compare_means(aes(pop, rec_rate), method = "wilcox",label.x.npc = "center") +
scale_y_continuous(limits = c(0,13),
name = "Recombination rate (cM/Mb)") +
scale_x_continuous(labels = c("Catalonia", "Sweden")) +
scale_color_continuous() +
guides(colour="none") +
theme(panel.background = element_blank(),
axis.line = element_line(colour = "black", size=0.2),
axis.title.x = element_blank(),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10),
axis.ticks.x = element_line(size = 0.2),
axis.ticks.y = element_blank(),
legend.text = element_text(size=10))
ggplot(rec_rate_comp) +
geom_boxplot(aes(pop, rec_rate*1000000, fill=pop)) +
stat_compare_means(aes(pop, rec_rate), method = "wilcox",label.x.npc = "center") +
scale_y_continuous(limits = c(0,13),
name = "Recombination rate (cM/Mb)") +
scale_x_discrete(labels = c("Catalonia", "Sweden")) +
scale_color_continuous() +
guides(colour="none") +
theme(panel.background = element_blank(),
axis.line = element_line(colour = "black", size=0.2),
axis.title.x = element_blank(),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10),
axis.ticks.x = element_line(size = 0.2),
axis.ticks.y = element_blank(),
legend.text = element_text(size=10))
ggplot(rec_rate_comp) +
geom_boxplot(aes(pop, rec_rate*1000000, fill=pop)) +
stat_compare_means(aes(pop, rec_rate), method = "wilcox",label.x.npc = "center") +
scale_y_continuous(limits = c(0,13),
name = "Recombination rate (cM/Mb)") +
scale_x_discrete(labels = c("Catalonia", "Sweden")) +
scale_color_continuous(guide) +
guides(colour="none") +
theme(panel.background = element_blank(),
axis.line = element_line(colour = "black", size=0.2),
axis.title.x = element_blank(),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10),
axis.ticks.x = element_line(size = 0.2),
axis.ticks.y = element_blank(),
legend.position = "none")
ggplot(rec_rate_comp) +
geom_boxplot(aes(pop, rec_rate*1000000, fill=pop)) +
stat_compare_means(aes(pop, rec_rate), method = "wilcox",label.x.npc = "center") +
scale_y_continuous(limits = c(0,13),
name = "Recombination rate (cM/Mb)") +
scale_x_discrete(labels = c("Catalonia", "Sweden")) +
scale_color_continuous() +
theme(panel.background = element_blank(),
axis.line = element_line(colour = "black", size=0.2),
axis.title.x = element_blank(),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10),
axis.ticks.x = element_line(size = 0.2),
axis.ticks.y = element_blank(),
legend.position = "none")
ggplot(rec_rate_comp) +
geom_boxplot(aes(pop, rec_rate*1000000, fill=pop)) +
stat_compare_means(aes(pop, rec_rate), method = "wilcox",label.x.npc = "center") +
scale_y_continuous(limits = c(0,13),
name = "Recombination rate (cM/Mb)") +
scale_x_discrete(labels = c("Catalonia", "Sweden")) +
scale_fill_discrete(value = c("yellow", "blue")) +
theme(panel.background = element_blank(),
axis.line = element_line(colour = "black", size=0.2),
axis.title.x = element_blank(),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10),
axis.ticks.x = element_line(size = 0.2),
axis.ticks.y = element_blank(),
legend.position = "none")
ggplot(rec_rate_comp) +
geom_boxplot(aes(pop, rec_rate*1000000, fill=pop)) +
stat_compare_means(aes(pop, rec_rate), method = "wilcox",label.x.npc = "center") +
scale_y_continuous(limits = c(0,13),
name = "Recombination rate (cM/Mb)") +
scale_x_discrete(labels = c("Catalonia", "Sweden")) +
scale_fill_manual(values = c("yellow", "blue")) +
theme(panel.background = element_blank(),
axis.line = element_line(colour = "black", size=0.2),
axis.title.x = element_blank(),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10),
axis.ticks.x = element_line(size = 0.2),
axis.ticks.y = element_blank(),
legend.position = "none")
ggplot(rec_rate_comp) +
geom_boxplot(aes(pop, rec_rate*1000000, fill=pop)) +
stat_compare_means(aes(pop, rec_rate), method = "wilcox",label.x.npc = "center") +
scale_y_continuous(limits = c(0,13),
name = "Recombination rate (cM/Mb)") +
scale_x_discrete(labels = c("Catalonia", "Sweden")) +
scale_fill_manual(values = c("#e6b207", "#232ea1")) +
theme(panel.background = element_blank(),
axis.line = element_line(colour = "black", size=0.2),
axis.title.x = element_blank(),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10),
axis.ticks.x = element_line(size = 0.2),
axis.ticks.y = element_blank(),
legend.position = "none")
ggplot(rec_rate_comp) +
geom_boxplot(aes(pop, rec_rate*1000000, fill=pop)) +
stat_compare_means(aes(pop, rec_rate), method = "wilcox",label.x.npc = "center") +
scale_y_continuous(limits = c(0,13),
name = "Recombination rate (cM/Mb)") +
scale_x_discrete(labels = c("Catalonia", "Sweden")) +
scale_fill_manual(values = c("#e6b207", "#4883c2")) +
theme(panel.background = element_blank(),
axis.line = element_line(colour = "black", size=0.2),
axis.title.x = element_blank(),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10),
axis.ticks.x = element_line(size = 0.2),
axis.ticks.y = element_blank(),
legend.position = "none")
ggsave("rec_rate_pop.pdf", device = "pdf", height = 6, width = 6)
ggsave("rec_rate_pop.pdf", device = "pdf", height = 4, width = 4)
ggplot(rec_rate_comp) +
geom_boxplot(aes(pop, rec_rate*1000000, fill=pop), colour="grey") +
stat_compare_means(aes(pop, rec_rate), method = "wilcox",label.x.npc = "center") +
scale_y_continuous(limits = c(0,13),
name = "Recombination rate (cM/Mb)") +
scale_x_discrete(labels = c("Catalonia", "Sweden")) +
scale_fill_manual(values = c("#e6b207", "#4883c2")) +
theme(panel.background = element_blank(),
axis.line = element_line(colour = "black", size=0.2),
axis.title.x = element_blank(),
axis.text.y = element_text(size = 10, colour = "grey"),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10),
axis.ticks.x = element_line(size = 0.2),
axis.ticks.y = element_line(size = 0.2),
legend.position = "none")
ggplot(rec_rate_comp) +
geom_boxplot(aes(pop, rec_rate*1000000, fill=pop), colour="grey") +
stat_compare_means(aes(pop, rec_rate), method = "wilcox",label.x.npc = "center") +
scale_y_continuous(limits = c(0,13),
name = "Recombination rate (cM/Mb)") +
scale_x_discrete(labels = c("Catalonia", "Sweden")) +
scale_fill_manual(values = c("#e6b207", "#4883c2")) +
theme(panel.background = element_blank(),
axis.line = element_line(colour = "black", size=0.2),
axis.title.x = element_blank(),
axis.title.y = element_text(size = 10, colour = "grey"),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10),
axis.ticks.x = element_line(size = 0.2),
axis.ticks.y = element_line(size = 0.2),
legend.position = "none")
ggsave("rec_rate_pop.pdf", device = "pdf", height = 4, width = 4)
ggplot(rec_rate_comp) +
geom_boxplot(aes(pop, rec_rate*1000000, fill=pop), colour="dark grey") +
stat_compare_means(aes(pop, rec_rate), method = "wilcox",label.x.npc = "center") +
scale_y_continuous(limits = c(0,13),
name = "Recombination rate (cM/Mb)") +
scale_x_discrete(labels = c("Catalonia", "Sweden")) +
scale_fill_manual(values = c("#e6b207", "#4883c2")) +
theme(panel.background = element_blank(),
axis.line = element_line(colour = "black", size=0.2),
axis.title.x = element_blank(),
axis.title.y = element_text(size = 10, colour = "grey"),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10),
axis.ticks.x = element_line(size = 0.2),
axis.ticks.y = element_line(size = 0.2),
legend.position = "none")
ggsave("rec_rate_pop.pdf", device = "pdf", height = 4, width = 4)
ggplot(rec_rate_comp) +
geom_boxplot(aes(pop, rec_rate*1000000, fill=pop), colour="dark grey") +
stat_compare_means(aes(pop, rec_rate), method = "wilcox",label.x.npc = "center") +
scale_y_continuous(limits = c(0,13),
name = "Recombination rate (cM/Mb)") +
scale_x_discrete(labels = c("Catalonia", "Sweden")) +
scale_fill_manual(values = c("#e6b207", "#4883c2")) +
theme(panel.background = element_blank(),
axis.line = element_line(colour = "black", size=0.2),
axis.title.x = element_blank(),
axis.title.y = element_text(size = 10, colour = "dark grey"),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10),
axis.ticks.x = element_line(size = 0.2),
axis.ticks.y = element_line(size = 0.2),
legend.position = "none")
ggsave("rec_rate_pop.pdf", device = "pdf", height = 4, width = 4)
ggplot(rec_rate_comp) +
geom_boxplot(aes(pop, rec_rate*1000000, fill=pop), colour="dark grey") +
stat_compare_means(aes(pop, rec_rate), method = "wilcox",label.x.npc = "center") +
scale_y_continuous(limits = c(0,13),
name = "Recombination rate (cM/Mb)") +
scale_x_discrete(labels = c("Catalonia", "Sweden")) +
scale_fill_manual(values = c("#e6b207", "#4883c2")) +
theme(panel.background = element_blank(),
axis.line = element_line(colour = "black", size=0.2),
axis.title.x = element_blank(),
axis.title.y = element_text(size = 10, colour = "black"),
axis.text.y = element_text(size = 10, colour = "black"),
axis.text.x = element_text(size = 10, colour = "black"),
axis.ticks.x = element_line(size = 0.2),
axis.ticks.y = element_line(size = 0.2),
legend.position = "none")
ggsave("rec_rate_pop.pdf", device = "pdf", height = 4, width = 4)
ggplot(rec_rate_comp) +
geom_boxplot(aes(pop, rec_rate*1000000, fill=pop), colour="#2e3133") +
stat_compare_means(aes(pop, rec_rate), method = "wilcox",label.x.npc = "center") +
scale_y_continuous(limits = c(0,13),
name = "Recombination rate (cM/Mb)") +
scale_x_discrete(labels = c("Catalonia", "Sweden")) +
scale_fill_manual(values = c("#e6b207", "#4883c2")) +
theme(panel.background = element_blank(),
axis.line = element_line(colour = "black", size=0.2),
axis.title.x = element_blank(),
axis.title.y = element_text(size = 10, colour = "black"),
axis.text.y = element_text(size = 10, colour = "black"),
axis.text.x = element_text(size = 10, colour = "black"),
axis.ticks.x = element_line(size = 0.2),
axis.ticks.y = element_line(size = 0.2),
legend.position = "none")
ggsave("rec_rate_pop.pdf", device = "pdf", height = 4, width = 4)
sum(aggregate(cat_map$V2, list(cat_map$V1), max)$x)*1000000)
sum(aggregate(cat_map$V2, list(cat_map$V1), max)$x)*1000000
sum(aggregate(cat_map$V2, list(cat_map$V1), max)$x)
sum(aggregate(swe_map$V2, list(swe_map$V1), max)$x)
sum(aggregate(cat_map$V9, list(cat_map$V8), max)$x))
sum(aggregate(cat_map$V9, list(cat_map$V8), max)$x)
sum(aggregate(cat_map$V9, list(cat_map$V8), max)$x)/660
sum(aggregate(swe_map$V9, list(swe_map$V8), max)$x)/660
paste("Appr recombination rate (cM/Mb):", sum(aggregate(swe_map$V9, list(swe_map$V8), max)$x)/sum(aggregate(swe_map$V2, list(swe_map$V1), max)$x)*1000000)
paste("Appr recombination rate (cM/Mb):", sum(aggregate(cat_map$V9, list(cat_map$V8), max)$x)/sum(aggregate(cat_map$V2, list(cat_map$V1), max)$x)*1000000)
ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
group <- gl(2, 10, 20, labels = c("Ctl","Trt"))
weight <- c(ctl, trt)
lm.D9 <- lm(weight ~ group)
lm.D90 <- lm(weight ~ group - 1) # omitting intercept
anova(lm.D9)
summary(lm.D90)
summary(lm.D9)
plot(ctr, trt)
plot(ctl, trt)
