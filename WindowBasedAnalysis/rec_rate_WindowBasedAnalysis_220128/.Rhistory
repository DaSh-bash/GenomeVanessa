allRes_BP$p_adj_pc <- p.adjust(allRes_BP$parentChFisher, method = "fdr")
allRes_BP$p_adj_elim <- p.adjust(allRes_BP$elimFisher, method = "fdr")
#adj p-value above 0.05
allRes_BP[allRes_BP$p_adj<=0.05, ]
allRes_BP[allRes_BP$p_adj_pc<=0.05, ]
allRes_BP[allRes_BP$p_adj_elim<=0.05, ]
allRes_BP$GO_class <- "BP"
#cellular compartment
CC_resultFisher_weight01 <- runTest(GO_data_CC, algorithm = "weight01", statistic = "fisher")
CC_resultFisher_weight01
CC_resultFisher_classic <- runTest(GO_data_CC, algorithm = "classic", statistic = "fisher")
CC_resultFisher_classic
CC_resultFisher_parentChild <- runTest(GO_data_CC, algorithm = "parentChild", statistic = "fisher")
CC_resultFisher_parentChild
CC_resultFisher_elim <- runTest(GO_data_CC, algorithm = "elim", statistic = "fisher")
CC_resultFisher_elim
#allGO = usedGO(object = GOdata)
#topNodes = length(allGO) in GenTable() to get a table with all GO:s to do fdr
allGO = usedGO(object = GO_data_CC)
allRes_CC <- GenTable(GO_data_CC,
weight01Fisher = CC_resultFisher_weight01,
classicFisher = CC_resultFisher_classic,
parentChFisher=CC_resultFisher_parentChild,
elimFisher=CC_resultFisher_elim,
orderBy = "weight01Fisher",
ranksOf = "weight01Fisher",
topNodes = length(allGO),
numChar=1000)
allRes_CC$weight01Fisher <- as.numeric(allRes_CC$weight01Fisher)
allRes_CC[allRes_CC$weight01Fisher<=0.05, ]
allRes_CC$parentChFisher <- as.numeric(allRes_CC$parentChFisher)
allRes_CC[allRes_CC$parentChFisher<=0.05, ]
allRes_CC$elimFisher <- as.numeric(allRes_CC$elimFisher)
allRes_CC[allRes_CC$elimFisher<=0.05, ]
#multiple test correction, method Benjamini-Hochberg
allRes_CC$p_adj <- p.adjust(allRes_CC$weight01Fisher, method = "fdr")
allRes_CC$p_adj_pc <- p.adjust(allRes_CC$parentChFisher, method = "fdr")
allRes_CC$p_adj_elim <- p.adjust(allRes_CC$elimFisher, method = "fdr")
#adj p-value above 0.05
allRes_CC[allRes_CC$p_adj<=0.05, ]
allRes_CC[allRes_CC$p_adj_pc<=0.05, ]
allRes_CC[allRes_CC$p_adj_elim<=0.05, ]
allRes_CC$GO_class <- "CC"
#molecular function
MF_resultFisher_weight01 <- runTest(GO_data_MF, algorithm = "weight01", statistic = "fisher")
MF_resultFisher_weight01
MF_resultFisher_classic <- runTest(GO_data_MF, algorithm = "classic", statistic = "fisher")
MF_resultFisher_classic
MF_resultFisher_parentChild <- runTest(GO_data_MF, algorithm = "parentChild", statistic = "fisher")
MF_resultFisher_parentChild
MF_resultFisher_elim <- runTest(GO_data_MF, algorithm = "elim", statistic = "fisher")
MF_resultFisher_elim
#allGO = usedGO(object = GOdata)
#topNodes = length(allGO) in GenTable() to get a table with all GO:s to do fdr
allGO = usedGO(object = GO_data_MF)
allRes_MF <- GenTable(GO_data_MF,
weight01Fisher = MF_resultFisher_weight01,
classicFisher = MF_resultFisher_classic,
parentChFisher=MF_resultFisher_parentChild,
elimFisher=MF_resultFisher_elim,
orderBy = "weight01Fisher",
ranksOf = "weight01Fisher",
topNodes = length(allGO),
numChar=1000)
allRes_MF$weight01Fisher <- as.numeric(allRes_MF$weight01Fisher)
allRes_MF[allRes_MF$weight01Fisher<=0.05, ]
allRes_MF$parentChFisher <- as.numeric(allRes_MF$parentChFisher)
allRes_MF[allRes_MF$parentChFisher<=0.05, ]
allRes_MF$elimFisher <- as.numeric(allRes_MF$elimFisher)
allRes_MF[allRes_MF$elimFisher<=0.05, ]
#multiple test correction, method Benjamini-Hochberg
allRes_MF$p_adj <- p.adjust(allRes_MF$weight01Fisher, method = "fdr")
allRes_MF$p_adj_pc <- p.adjust(allRes_MF$parentChFisher, method = "fdr")
allRes_MF$p_adj_elim <- p.adjust(allRes_MF$elimFisher, method = "fdr")
#adj p-value above 0.05
allRes_MF[allRes_MF$p_adj<=0.05, ]
allRes_MF[allRes_MF$p_adj_pc<=0.05, ]
allRes_MF[allRes_MF$p_adj_elim<=0.05, ]
allRes_MF$GO_class <- "MF"
#add gene names per GO (candidate genes)
allRes_BP$genes <- sapply(allRes_BP$GO.ID,
function(x)
{
genes_sel <- genesInTerm(GO_data_BP, x)
genes_sel[[1]][genes_sel[[1]] %in% candidate_genes]
})
allRes_BP$genes <- vapply(allRes_BP$genes, paste, collapse =",", character(1L))
allRes_CC$genes <- sapply(allRes_CC$GO.ID,
function(x)
{
genes_sel <- genesInTerm(GO_data_CC, x)
genes_sel[[1]][genes_sel[[1]] %in% candidate_genes]
})
allRes_CC$genes <- vapply(allRes_CC$genes, paste, collapse =",", character(1L))
allRes_MF$genes <- sapply(allRes_MF$GO.ID,
function(x)
{
genes_sel <- genesInTerm(GO_data_MF, x)
genes_sel[[1]][genes_sel[[1]] %in% candidate_genes]
})
allRes_MF$genes <- vapply(allRes_MF$genes, paste, collapse =",", character(1L))
#col_VAR=col_gene
col_vector <- c(col_autosome, col_W, col_Z)
regional_gene_prop <- plot_regional_distribution(rr_repeats_genes_long, occ_length)
regional_gene_prop + facet_wrap(~feature)
regional_gene_prop <- plot_regional_distribution(rr_repeats_genes_long, rr_repeats_genes_long$occ_length)
regional_gene_prop + facet_wrap(~feature)
regional_gene_prop + facet_wrap(~feature, scales = "free_y")
#without W
regional_gene_prop <- plot_regional_distribution(subset(rr_repeats_genes_long, chr_type!="W"), subset(rr_repeats_genes_long, chr_type!="W")$occ_length)
regional_gene_prop + facet_wrap(~feature, scales = "free_y")
regional_gene_prop <- plot_regional_distribution(subset(rr_repeats_genes_long, chr_type!="W" & feature!="rpt"), subset(rr_repeats_genes_long, chr_type!="W" & feature!="rpt")$occ_length)
regional_gene_prop + facet_wrap(~feature, scales = "free_y")
#without W
col_vector <- c(col_autosome, col_Z)
regional_gene_prop <- plot_regional_distribution(subset(rr_repeats_genes_long, chr_type!="W" & feature!="rpt"), subset(rr_repeats_genes_long, chr_type!="W" & feature!="rpt")$occ_length)
regional_gene_prop + facet_wrap(~feature, scales = "free_y")
col_vector <- c(col_autosome, col_W, col_Z)
regional_gene_prop <- plot_regional_distribution(rr_repeats_genes_long, rr_repeats_genes_long$occ_length)
regional_gene_prop + facet_wrap(~feature, scales = "free_y")
#without W
col_vector <- c(col_autosome, col_Z)
regional_gene_prop <- plot_regional_distribution(subset(rr_repeats_genes_long, chr_type!="W" & feature!="rpt"), subset(rr_repeats_genes_long, chr_type!="W" & feature!="rpt")$occ_length)
regional_gene_prop + facet_wrap(~feature, scales = "free_y")
apply(rec_rate[c("map")], 2, table)
round(mean(rec_rate_mean$marker_density))
write(file="../tables/summary_rec_rate.txt", print(paste("Markers in map:", length(rec_rate$mkr))))
write(file="../tables/summary_rec_rate.txt", append = T,
paste("Total map length:", round(sum(rec_rate_mean$map_length),3),
"\nAverage marker density:", mean(rec_rate_mean$marker_density),
"\nMean recombination rate (overall windows):", round(mean(rec_rate$wind_2mb, na.rm = T),3),
"\nsd (overall windows):", round(sd(rec_rate$wind_2mb, na.rm = T),3),
"\nRecombination rate (wind2mb) Z:", round(mean(rec_rate[rec_rate$chr_type=="Z",]$wind_2mb, na.rm = T), 3),
"\nRecombination rate (wind2mb) mean autosomes:", round(mean(rec_rate[rec_rate$chr_type=="Autosome",]$wind_2mb, na.rm = T),3),
"\nRecombination rate (wind2mb) sd autosomes:", round(sd(rec_rate[rec_rate$chr_type=="Autosome",]$wind_2mb, na.rm = T),3)))
write(file="../tables/summary_rec_rate.txt", print(paste("Markers in map:", length(rec_rate$mkr))))
write(file="../tables/summary_rec_rate.txt", append = T,
paste("Total map length:", round(sum(rec_rate_mean$map_length),3),
"\nAverage marker density:", round(mean(rec_rate_mean$marker_density), 3),
"\nMean recombination rate (overall windows):", round(mean(rec_rate$wind_2mb, na.rm = T),3),
"\nsd (overall windows):", round(sd(rec_rate$wind_2mb, na.rm = T),3),
"\nRecombination rate (wind2mb) Z:", round(mean(rec_rate[rec_rate$chr_type=="Z",]$wind_2mb, na.rm = T), 3),
"\nRecombination rate (wind2mb) mean autosomes:", round(mean(rec_rate[rec_rate$chr_type=="Autosome",]$wind_2mb, na.rm = T),3),
"\nRecombination rate (wind2mb) sd autosomes:", round(sd(rec_rate[rec_rate$chr_type=="Autosome",]$wind_2mb, na.rm = T),3)))
unique(rr_repeats_genes_long$chrom)
#proportion without the 4 smallest
corr_prop_rr_red <-
ggplot(data=subset(rr_repeats_genes_long[!rowSums(is.na(rr_repeats_genes_long[c( "wind_2mb")])),], chr_type!="W" & chrom!= "LR999952.1" & "LR999954.1" & "LR999955.1"), aes(occ_length, wind_2mb)) +
geom_point(aes(colour=chr_type, fill=chr_type),shape=21,size=1) +
geom_smooth(aes(colour=chr_type), method = "lm", fullrange=TRUE, se=FALSE) +
stat_cor(aes(colour=chr_type), show.legend=FALSE, label.y = c(14,15.5)) +
facet_wrap(~feature, scales = "free_x") +
coord_cartesian(ylim = c(0,16)) +
scale_colour_discrete(type = c(col_autosome, col_Z)) +
scale_fill_discrete(type = c(col_autosome, col_Z)) +
xlab("Proportion") +
ylab("Recombination rate (cM/Mb)") +
theme(panel.background = element_blank(),
axis.line = element_line(size = 0.2, colour = "gray"),
axis.title = element_text(size = 10),
legend.text = element_text(size = 10),
legend.key=element_blank(),
legend.title = element_blank(),
legend.position = c(0.6,0.1))
#proportion without the 4 smallest
corr_prop_rr_red <-
ggplot(data=subset(rr_repeats_genes_long[!rowSums(is.na(rr_repeats_genes_long[c( "wind_2mb")])),], chr_type!="W" & chrom!= "LR999952.1" & chrom!="LR999954.1" & chrom!="LR999955.1"), aes(occ_length, wind_2mb)) +
geom_point(aes(colour=chr_type, fill=chr_type),shape=21,size=1) +
geom_smooth(aes(colour=chr_type), method = "lm", fullrange=TRUE, se=FALSE) +
stat_cor(aes(colour=chr_type), show.legend=FALSE, label.y = c(14,15.5)) +
facet_wrap(~feature, scales = "free_x") +
coord_cartesian(ylim = c(0,16)) +
scale_colour_discrete(type = c(col_autosome, col_Z)) +
scale_fill_discrete(type = c(col_autosome, col_Z)) +
xlab("Proportion") +
ylab("Recombination rate (cM/Mb)") +
theme(panel.background = element_blank(),
axis.line = element_line(size = 0.2, colour = "gray"),
axis.title = element_text(size = 10),
legend.text = element_text(size = 10),
legend.key=element_blank(),
legend.title = element_blank(),
legend.position = c(0.6,0.1))
corr_prop_rr_red
mean(rr_repeats_genes$wind_2mb)
mean(rr_repeats_genes$wind_2mb, rm.na=T)
summary(rr_repeats_genes$wind_2mb)
mean(rec_rate$wind_2mb, na.rm = T)
summary(rec_rate$wind_2mb, na.rm = T)
max(rec_rate$wind_2mb, na.rm = T)
write(file="../tables/summary_rec_rate.txt", print(paste("Markers in map:", length(rec_rate$mkr))))
write(file="../tables/summary_rec_rate.txt", append = T,
paste("Total map length:", round(sum(rec_rate_mean$map_length),3),
"\nAverage marker density:", round(mean(rec_rate_mean$marker_density), 3),
"\nMean recombination rate (overall windows):", round(mean(rec_rate$wind_2mb, na.rm = T),3),
"\nsd (overall windows):", round(sd(rec_rate$wind_2mb, na.rm = T),3),
"\nMaximum rec rate: ", max(rec_rate$wind_2mb, na.rm = T),
"\nRecombination rate (wind2mb) Z:", round(mean(rec_rate[rec_rate$chr_type=="Z",]$wind_2mb, na.rm = T), 3),
"\nRecombination rate (wind2mb) mean autosomes:", round(mean(rec_rate[rec_rate$chr_type=="Autosome",]$wind_2mb, na.rm = T),3),
"\nRecombination rate (wind2mb) sd autosomes:", round(sd(rec_rate[rec_rate$chr_type=="Autosome",]$wind_2mb, na.rm = T),3)))
sd(rr_repeats_genes$wind_2mb, rm.na=T)
sd(rr_repeats_genes$wind_2mb)
sd(rr_repeats_genes_wide$wind_2mb)
sd(subset(rr_repeats_genes_long[!rowSums(is.na(rr_repeats_genes_long[c( "wind_2mb")])),])
)
subset(rr_repeats_genes_long[!rowSums(is.na(rr_repeats_genes_long[c( "wind_2mb")])),])
subset(rr_repeats_genes_long[!rowSums(is.na(rr_repeats_genes_long[c( "wind_2mb")])),])$wind_2mb
sd(subset(rr_repeats_genes_long[!rowSums(is.na(rr_repeats_genes_long[c( "wind_2mb")])),])$wind_2mb)
maen(subset(rr_repeats_genes_long[!rowSums(is.na(rr_repeats_genes_long[c( "wind_2mb")])),])$wind_2mb)
mean(subset(rr_repeats_genes_long[!rowSums(is.na(rr_repeats_genes_long[c( "wind_2mb")])),])$wind_2mb)
#summary windowbased
write(file="tables/summary_wd_based_rec_rate.txt",
paste("Average rec rate: ",
mean(subset(rr_repeats_genes_long[!rowSums(is.na(rr_repeats_genes_long[c( "wind_2mb")])),])$wind_2mb),
"\nSd: ",
sd(subset(rr_repeats_genes_long[!rowSums(is.na(rr_repeats_genes_long[c( "wind_2mb")])),])$wind_2mb),
"\nMax: ",
max(subset(rr_repeats_genes_long[!rowSums(is.na(rr_repeats_genes_long[c( "wind_2mb")])),])$wind_2mb),
"\nMin: ",
min(subset(rr_repeats_genes_long[!rowSums(is.na(rr_repeats_genes_long[c( "wind_2mb")])),])$wind_2mb)))
corrFunc <- function(var1, var2, data) {
result = cor.test(data[,var1], data[,var2], method="spearman")
data.frame(var1, var2, result[c("estimate","p.value","statistic","method")],
stringsAsFactors=FALSE)
}
COR_TEST <- as.data.frame(rr_repeats_genes_wide[rr_repeats_genes_wide$chr_type!="W",])
## Pairs of variables for which we want correlations
#rec_rate
#vars = data.frame(v1=names(mtcars)[1], v2=names(mtcars)[-1])
vars = data.frame(v1=names((COR_TEST)["loess"]), v2=names(select(COR_TEST, starts_with("occ_"))))
#install.packages("ggpubr")
library(ggplot2)
library(ggpubr)
library(viridis)
library("tidyr")
library(plyr)
library(dplyr)
library(data.table)
library(stringr)
library(car)
library(sjPlot)
library(nord)
library(sjstats)
library(stargazer)
corrFunc <- function(var1, var2, data) {
result = cor.test(data[,var1], data[,var2], method="spearman")
data.frame(var1, var2, result[c("estimate","p.value","statistic","method")],
stringsAsFactors=FALSE)
}
COR_TEST <- as.data.frame(rr_repeats_genes_wide[rr_repeats_genes_wide$chr_type!="W",])
## Pairs of variables for which we want correlations
#rec_rate
#vars = data.frame(v1=names(mtcars)[1], v2=names(mtcars)[-1])
vars = data.frame(v1=names((COR_TEST)["loess"]), v2=names(select(COR_TEST, starts_with("occ_"))))
knitr::opts_chunk$set(echo = TRUE)
#install.packages("ggpubr")
library(ggplot2)
library(ggpubr)
library(viridis)
library("tidyr")
library(plyr)
library(dplyr)
library(data.table)
library(stringr)
library(car)
library(sjPlot)
library(nord)
library(sjstats)
library(stargazer)
corr_prop_rr_sign
col_autosome
corr_prop_rr_sign <-
ggplot(data=subset(rr_repeats_genes_long[!rowSums(is.na(rr_repeats_genes_long[c( "wind_2mb")])),], chr_type!="W"), aes(occ_length, wind_2mb)) +
geom_point(aes(colour=chr_type, fill=chr_type),shape=21,size=1) +
geom_smooth(data=subset(rr_repeats_genes_long[!rowSums(is.na(rr_repeats_genes_long[c( "wind_2mb")])),], chr_type=="Autosome"), aes(occ_length, wind_2mb), colour=col_autosome, method = "lm", fullrange=TRUE, se=FALSE, linetype="dashed") +
geom_smooth(data=subset(rr_repeats_genes_long[!rowSums(is.na(rr_repeats_genes_long[c( "wind_2mb")])),], chr_type=="Autosome" & feature!="LTR"), aes(occ_length, wind_2mb), colour=col_autosome, method = "lm", fullrange=TRUE, se=FALSE) +
geom_smooth(data=subset(rr_repeats_genes_long[!rowSums(is.na(rr_repeats_genes_long[c( "wind_2mb")])),], chr_type=="Z"), aes(occ_length, wind_2mb), colour=col_Z, method = "lm", fullrange=TRUE, se=FALSE, linetype="dashed") +
geom_smooth(data=subset(rr_repeats_genes_long[!rowSums(is.na(rr_repeats_genes_long[c( "wind_2mb")])),], chr_type=="Z" & feature=="DNA" & feature=="rpt"), aes(occ_length, wind_2mb), colour=col_Z, method = "lm", fullrange=TRUE, se=FALSE) +
stat_cor(aes(colour=chr_type), show.legend=FALSE, label.y = c(14,15.5), method = "spearman", cor.coef.name = "rho") +
facet_wrap(~feature, scales = "free_x") +
coord_cartesian(ylim = c(0,16)) +
scale_colour_discrete(type = c(col_autosome, col_Z)) +
scale_fill_discrete(type = c(col_autosome, col_Z)) +
xlab("Proportion") +
ylab("Recombination rate (cM/Mb)") +
theme(panel.background = element_blank(),
axis.line = element_line(size = 0.2, colour = "gray"),
axis.title = element_text(size = 10),
legend.text = element_text(size = 10),
legend.key=element_blank(),
legend.title = element_blank(),
legend.position = c(0.6,0.1))
rec_rate <- read.table("../rec_rate_est_220126/tables/rec_rate_windows.table")
rec_rate <- read.table("../../Link_map/rec_rate_est_220126/tables/rec_rate_windows.table")
head(rec_rate)
#only needed columns
for(i in c(1:length(unique(rec_rate$map)))) {
#to get mean per window
rec_rate_bin_temp <- aggregate(rec_rate[rec_rate$map==unique(rec_rate$map)[i],c("loess", "wind_2mb")], #the data frame
by=list(cut(rec_rate[rec_rate$map==unique(rec_rate$map)[i],"phys"],seq(1, rec_rate$chr_length[rec_rate$map==unique(rec_rate$map)[i]][1]+2000000, 2000000))), #the bins (see below)
mean, na.rm=T ) #the aggregating function
rec_rate_bin_temp$map <- unique(rec_rate$map)[i]
rec_rate_bin_temp$loess_sd <- aggregate(rec_rate[rec_rate$map==unique(rec_rate$map)[i],]$loess, #the data frame
by=list(cut(rec_rate[rec_rate$map==unique(rec_rate$map)[i],"phys"],seq(1, rec_rate$chr_length[rec_rate$map==unique(rec_rate$map)[i]][1]+2000000, 2000000))), #the bins (see below)
sd, na.rm=T ) #the aggregating function
rec_rate_bin_temp$loess_sd <- rec_rate_bin_temp$loess_sd$x
rec_rate_bin_temp$wd_sd <- aggregate(rec_rate[rec_rate$map==unique(rec_rate$map)[i],]$wind_2mb, #the data frame
by=list(cut(rec_rate[rec_rate$map==unique(rec_rate$map)[i],"phys"],seq(1, rec_rate$chr_length[rec_rate$map==unique(rec_rate$map)[i]][1]+2000000, 2000000))), #the bins (see below)
sd, na.rm=T ) #the aggregating function
rec_rate_bin_temp$wd_sd <- rec_rate_bin_temp$wd_sd$x
#to get nr of markers per window
rec_rate_bin_temp$mkr <- aggregate(rec_rate[rec_rate$map==unique(rec_rate$map)[i],]$mkr, #the data frame
by=list(cut(rec_rate[rec_rate$map==unique(rec_rate$map)[i],"phys"],seq(1, rec_rate$chr_length[rec_rate$map==unique(rec_rate$map)[i]][1]+2000000, 2000000))), #the bins (see below)
length) #the aggregating function
rec_rate_bin_temp$mkr <- rec_rate_bin_temp$mkr$x
if (i==1) {
rec_rate_bin <- rec_rate_bin_temp
} else {
rec_rate_bin <- rbind(rec_rate_bin, rec_rate_bin_temp)
}
}
str(rec_rate_bin)
head(rec_rate_bin)
#check that nr of markers are the same as in sum stat
aggregate(mkr~map, data=rec_rate_bin, sum)$mkr - aggregate(mkr~map,data=rec_rate, length)$mkr
#make column with start values
rec_rate_bin$begin <-
as.integer(str_split(gsub(pattern='\\(|\\]', replacement = "", x=rec_rate_bin$Group.1), ",", simplify = TRUE)[,1])
rec_rate_bin$begin <-
ifelse(rec_rate_bin$begin==1, rec_rate_bin$begin, rec_rate_bin$begin + 1)
rec_rate_bin$chrom <- rec_rate_bin$map
#add chr length
rec_rate_bin <- join(rec_rate_bin, unique(rec_rate[,c("map", "chr_length")]))
feature_counts <- read.table("data/feature_counts_round_2_mod.tsv", header = T)
feature_counts_new <- read.table("data/feature_counts_replace.tsv", header = T)
#replace with new values
test <- match(colnames(feature_counts_new),colnames(feature_counts))
feature_counts[,names(feature_counts_new)] <- feature_counts_new
#write.table(feature_counts, "data/feature_counts.csv", row.names = FALSE, quote = FALSE, sep = ",")
rr_repeats_genes <- join(feature_counts, rec_rate_bin, by= c("chrom", "begin"))
rr_repeats_genes$map <- NULL
rr_repeats_genes$Group.1 <- NULL
rr_repeats_genes[is.na(rr_repeats_genes$mkr),]$mkr <- 0
#Change NaN to NA
rr_repeats_genes <- rr_repeats_genes %>% mutate_all(~ifelse(is.nan(.), NA, .))
rr_repeats_genes$chr_type <- "Autosome"
rr_repeats_genes$chr_type[rr_repeats_genes$chrom=="LR999924.1"] <- "Z"
rr_repeats_genes$chr_type[rr_repeats_genes$chrom=="LR999940.1"] <- "W"
rr_repeats_genes$chr_type <- as.factor(rr_repeats_genes$chr_type)
#get GC-content
gc_content <- read.table("data/GCA_905220365.1_ilVanCard2.1_genomic_chroms.2MB.GC.tsv", header = T)
#check rows
gc_content$X3_usercol - rr_repeats_genes$end
rr_repeats_genes$gc <- gc_content[,"X5_pct_gc"]
#add new chr_lenght (gets alot of NA from the old)
chr_length <- read.table("../result_qc/qualimap_dtol_210323/scaffold_length", header = T)
feature_counts <- read.table("data/feature_counts_round_2_mod.tsv", header = T)
feature_counts_new <- read.table("data/feature_counts_replace.tsv", header = T)
#replace with new values
test <- match(colnames(feature_counts_new),colnames(feature_counts))
feature_counts[,names(feature_counts_new)] <- feature_counts_new
#write.table(feature_counts, "data/feature_counts.csv", row.names = FALSE, quote = FALSE, sep = ",")
rr_repeats_genes <- join(feature_counts, rec_rate_bin, by= c("chrom", "begin"))
rr_repeats_genes$map <- NULL
rr_repeats_genes$Group.1 <- NULL
rr_repeats_genes[is.na(rr_repeats_genes$mkr),]$mkr <- 0
#Change NaN to NA
rr_repeats_genes <- rr_repeats_genes %>% mutate_all(~ifelse(is.nan(.), NA, .))
rr_repeats_genes$chr_type <- "Autosome"
rr_repeats_genes$chr_type[rr_repeats_genes$chrom=="LR999924.1"] <- "Z"
rr_repeats_genes$chr_type[rr_repeats_genes$chrom=="LR999940.1"] <- "W"
rr_repeats_genes$chr_type <- as.factor(rr_repeats_genes$chr_type)
#get GC-content
gc_content <- read.table("data/GCA_905220365.1_ilVanCard2.1_genomic_chroms.2MB.GC.tsv", header = T)
#check rows
gc_content$X3_usercol - rr_repeats_genes$end
rr_repeats_genes$gc <- gc_content[,"X5_pct_gc"]
#add new chr_lenght (gets alot of NA from the old)
chr_length <- read.table("data/scaffold_length", header = T)
colnames(chr_length) <- c("chrom", "chr_length2")
rr_repeats_genes <- join(rr_repeats_genes, chr_length)
rr_repeats_genes$chr_length <- rr_repeats_genes$chr_length2
rr_repeats_genes$chr_length2 <- NULL
str(rr_repeats_genes)
#select columns based on string
#select(rr_repeats_window, starts_with("length"))
#or colnames(rr_repeats_genes[, grepl("length_", colnames(rr_repeats_genes))])
#long format
# rr_repeats_genes_long <- pivot_longer(rr_repeats_genes, select(rr_repeats_genes, starts_with("length")), names_to = "repeat_class", values_to = "proportion")
# str(rr_repeats_genes_long)
# rr_repeats_genes_long <- melt(setDT(rr_repeats_genes), measure.vars = list(names(select(rr_repeats_genes, starts_with("count"))),names(select(rr_repeats_genes, starts_with("length")))), variable.name = "gen_feat", value.name = c("count_var", "length_var"))
rr_repeats_genes_long <- pivot_longer(rr_repeats_genes, cols =starts_with(c("length", "gc")),  names_to ="feature", names_prefix = "length_", values_to = "feat_length")
#get density of repeats per kilobase: length/sequence length
rr_repeats_genes_long$occ_length <- rr_repeats_genes_long$feat_length/(rr_repeats_genes_long$end-rr_repeats_genes_long$begin+1)
#change back to prop for gc content
rr_repeats_genes_long[rr_repeats_genes_long$feature == "gc",]$occ_length <- rr_repeats_genes_long[rr_repeats_genes_long$feature == "gc",]$feat_length
#relative position (begin + end)/2 (in the middle of the window)
rr_repeats_genes_long$rel_pos <- ((rr_repeats_genes_long$begin+rr_repeats_genes_long$end)/2)/rr_repeats_genes_long$chr_length
str(rr_repeats_genes_long)
rr_repeats_genes_long$pos_group <- cut(sqrt(((rr_repeats_genes_long$rel_pos*100)-50)^2), c(-Inf,10,20,30,40,Inf), c(1,2,3,4,5))
str(rr_repeats_genes_long)
#get wide format for
rr_repeats_genes_wide <- pivot_wider(rr_repeats_genes_long, names_from = feature, values_from = c(feat_length, occ_length))
str(rr_repeats_genes_wide)
repeat_chr_level <- pivot_wider(aggregate(occ_length~chrom+feature, rr_repeats_genes_long, mean), names_from = feature, values_from = occ_length)
repeat_chr_level_tmp <- pivot_wider(aggregate(occ_length~chrom+feature, rr_repeats_genes_long, sd), names_from = feature, values_from = occ_length)
repeat_chr_level <- inner_join(repeat_chr_level, repeat_chr_level_tmp, by="chrom", suffix = c("","_sd"))
repeat_chr_level$chr_length <- unique(rr_repeats_genes_long$chr_length)
repeat_chr_level$chr_type <- unique(rr_repeats_genes[,c("chrom","chr_type")])$chr_type
repeat_chr_level$rr_mean_loess <- aggregate(rr_repeats_genes_long$loess, by=list(rr_repeats_genes_long$chrom), mean, na.rm=T)$x
repeat_chr_level$rr_sd_loess <- aggregate(rr_repeats_genes_long$loess, by=list(rr_repeats_genes_long$chrom), sd,na.rm=T)$x
repeat_chr_level$rr_mean_wind_2mb <- aggregate(rr_repeats_genes_long$wind_2mb, by=list(rr_repeats_genes_long$chrom), mean, na.rm=T)$x
repeat_chr_level$rr_sd_wind_2mb <- aggregate(rr_repeats_genes_long$wind_2mb, by=list(rr_repeats_genes_long$chrom), sd,na.rm=T)$x
col_Z <- "#009294"   #"#005F60"
col_W <- "#FAAB36"
col_autosome <- "dark grey"
#col_autosome <-     #darker grey
col_rec_rate <- "#249EA0"
col_repeats <- "#FD5900"
col_gene <- "#FAAB36"
corr_prop_rr_sign <-
ggplot(data=subset(rr_repeats_genes_long[!rowSums(is.na(rr_repeats_genes_long[c( "wind_2mb")])),], chr_type!="W"), aes(occ_length, wind_2mb)) +
geom_point(aes(colour=chr_type, fill=chr_type),shape=21,size=1) +
geom_smooth(data=subset(rr_repeats_genes_long[!rowSums(is.na(rr_repeats_genes_long[c( "wind_2mb")])),], chr_type=="Autosome"), aes(occ_length, wind_2mb), colour="#323333", method = "lm", fullrange=TRUE, se=FALSE, linetype="dashed") +
geom_smooth(data=subset(rr_repeats_genes_long[!rowSums(is.na(rr_repeats_genes_long[c( "wind_2mb")])),], chr_type=="Autosome" & feature!="LTR"), aes(occ_length, wind_2mb), colour="#323333", method = "lm", fullrange=TRUE, se=FALSE) +
geom_smooth(data=subset(rr_repeats_genes_long[!rowSums(is.na(rr_repeats_genes_long[c( "wind_2mb")])),], chr_type=="Z"), aes(occ_length, wind_2mb), colour=col_Z, method = "lm", fullrange=TRUE, se=FALSE, linetype="dashed") +
geom_smooth(data=subset(rr_repeats_genes_long[!rowSums(is.na(rr_repeats_genes_long[c( "wind_2mb")])),], chr_type=="Z" & feature=="DNA" & feature=="rpt"), aes(occ_length, wind_2mb), colour=col_Z, method = "lm", fullrange=TRUE, se=FALSE) +
stat_cor(aes(colour=chr_type), show.legend=FALSE, label.y = c(14,15.5), method = "spearman", cor.coef.name = "rho") +
facet_wrap(~feature, scales = "free_x") +
coord_cartesian(ylim = c(0,16)) +
scale_colour_discrete(type = c(col_autosome, col_Z)) +
scale_fill_discrete(type = c(col_autosome, col_Z)) +
xlab("Proportion") +
ylab("Recombination rate (cM/Mb)") +
theme(panel.background = element_blank(),
axis.line = element_line(size = 0.2, colour = "gray"),
axis.title = element_text(size = 10),
legend.text = element_text(size = 10),
legend.key=element_blank(),
legend.title = element_blank(),
legend.position = c(0.6,0.1))
corr_prop_rr_sign
col_autosome <- "#393b3b"
col_autosome <- "#393b3b"
corr_prop_rr_sign <-
ggplot(data=subset(rr_repeats_genes_long[!rowSums(is.na(rr_repeats_genes_long[c( "wind_2mb")])),], chr_type!="W"), aes(occ_length, wind_2mb)) +
geom_point(aes(colour=chr_type, fill=chr_type),shape=21,size=1) +
geom_smooth(data=subset(rr_repeats_genes_long[!rowSums(is.na(rr_repeats_genes_long[c( "wind_2mb")])),], chr_type=="Autosome"), aes(occ_length, wind_2mb), colour=col_autosome, method = "lm", fullrange=TRUE, se=FALSE, linetype="dashed") +
geom_smooth(data=subset(rr_repeats_genes_long[!rowSums(is.na(rr_repeats_genes_long[c( "wind_2mb")])),], chr_type=="Autosome" & feature!="LTR"), aes(occ_length, wind_2mb), colour=col_autosome, method = "lm", fullrange=TRUE, se=FALSE) +
geom_smooth(data=subset(rr_repeats_genes_long[!rowSums(is.na(rr_repeats_genes_long[c( "wind_2mb")])),], chr_type=="Z"), aes(occ_length, wind_2mb), colour=col_Z, method = "lm", fullrange=TRUE, se=FALSE, linetype="dashed") +
geom_smooth(data=subset(rr_repeats_genes_long[!rowSums(is.na(rr_repeats_genes_long[c( "wind_2mb")])),], chr_type=="Z" & feature=="DNA" & feature=="rpt"), aes(occ_length, wind_2mb), colour=col_Z, method = "lm", fullrange=TRUE, se=FALSE) +
stat_cor(aes(colour=chr_type), show.legend=FALSE, label.y = c(14,15.5), method = "spearman", cor.coef.name = "rho") +
facet_wrap(~feature, scales = "free_x") +
coord_cartesian(ylim = c(0,16)) +
scale_colour_discrete(type = c(col_autosome, col_Z)) +
scale_fill_discrete(type = c(col_autosome, col_Z)) +
xlab("Proportion") +
ylab("Recombination rate (cM/Mb)") +
theme(panel.background = element_blank(),
axis.line = element_line(size = 0.2, colour = "gray"),
axis.title = element_text(size = 10),
legend.text = element_text(size = 10),
legend.key=element_blank(),
legend.title = element_blank(),
legend.position = c(0.6,0.1))
corr_prop_rr_sign
col_autosome <- "#363838"
corr_prop_rr_sign <-
ggplot(data=subset(rr_repeats_genes_long[!rowSums(is.na(rr_repeats_genes_long[c( "wind_2mb")])),], chr_type!="W"), aes(occ_length, wind_2mb)) +
geom_point(aes(colour=chr_type, fill=chr_type),shape=21,size=1) +
geom_smooth(data=subset(rr_repeats_genes_long[!rowSums(is.na(rr_repeats_genes_long[c( "wind_2mb")])),], chr_type=="Autosome"), aes(occ_length, wind_2mb), colour=col_autosome, method = "lm", fullrange=TRUE, se=FALSE, linetype="dashed") +
geom_smooth(data=subset(rr_repeats_genes_long[!rowSums(is.na(rr_repeats_genes_long[c( "wind_2mb")])),], chr_type=="Autosome" & feature!="LTR"), aes(occ_length, wind_2mb), colour=col_autosome, method = "lm", fullrange=TRUE, se=FALSE) +
geom_smooth(data=subset(rr_repeats_genes_long[!rowSums(is.na(rr_repeats_genes_long[c( "wind_2mb")])),], chr_type=="Z"), aes(occ_length, wind_2mb), colour=col_Z, method = "lm", fullrange=TRUE, se=FALSE, linetype="dashed") +
geom_smooth(data=subset(rr_repeats_genes_long[!rowSums(is.na(rr_repeats_genes_long[c( "wind_2mb")])),], chr_type=="Z" & (feature=="DNA" & feature=="rpt")), aes(occ_length, wind_2mb), colour=col_Z, method = "lm", fullrange=TRUE, se=FALSE) +
stat_cor(aes(colour=chr_type), show.legend=FALSE, label.y = c(15.5,14), method = "spearman", cor.coef.name = "rho") +
facet_wrap(~feature, scales = "free_x") +
coord_cartesian(ylim = c(0,16)) +
scale_colour_discrete(type = c(col_autosome, col_Z)) +
scale_fill_discrete(type = c(col_autosome, col_Z)) +
xlab("Proportion") +
ylab("Recombination rate (cM/Mb)") +
theme(panel.background = element_blank(),
axis.line = element_line(size = 0.2, colour = "gray"),
axis.title = element_text(size = 10),
legend.text = element_text(size = 10),
legend.key=element_blank(),
legend.title = element_blank(),
legend.position = c(0.6,0.1))
corr_prop_rr_sign
corr_prop_rr_sign <-
ggplot(data=subset(rr_repeats_genes_long[!rowSums(is.na(rr_repeats_genes_long[c( "wind_2mb")])),], chr_type!="W"), aes(occ_length, wind_2mb)) +
geom_point(aes(colour=chr_type, fill=chr_type),shape=21,size=1) +
geom_smooth(data=subset(rr_repeats_genes_long[!rowSums(is.na(rr_repeats_genes_long[c( "wind_2mb")])),], chr_type=="Autosome"), aes(occ_length, wind_2mb), colour=col_autosome, method = "lm", fullrange=TRUE, se=FALSE, linetype="dashed") +
geom_smooth(data=subset(rr_repeats_genes_long[!rowSums(is.na(rr_repeats_genes_long[c( "wind_2mb")])),], chr_type=="Autosome" & feature!="LTR"), aes(occ_length, wind_2mb), colour=col_autosome, method = "lm", fullrange=TRUE, se=FALSE) +
geom_smooth(data=subset(rr_repeats_genes_long[!rowSums(is.na(rr_repeats_genes_long[c( "wind_2mb")])),], chr_type=="Z"), aes(occ_length, wind_2mb), colour=col_Z, method = "lm", fullrange=TRUE, se=FALSE, linetype="dashed") +
geom_smooth(data=subset(rr_repeats_genes_long[!rowSums(is.na(rr_repeats_genes_long[c( "wind_2mb")])),], chr_type=="Z" & feature!="CDS" & feature!="gc" & feature!="LINE" & feature!="SINE" & feature!="LTR"), aes(occ_length, wind_2mb), colour=col_Z, method = "lm", fullrange=TRUE, se=FALSE) +
stat_cor(aes(colour=chr_type), show.legend=FALSE, label.y = c(15.5,14), method = "spearman", cor.coef.name = "rho") +
facet_wrap(~feature, scales = "free_x") +
coord_cartesian(ylim = c(0,16)) +
scale_colour_discrete(type = c(col_autosome, col_Z)) +
scale_fill_discrete(type = c(col_autosome, col_Z)) +
xlab("Proportion") +
ylab("Recombination rate (cM/Mb)") +
theme(panel.background = element_blank(),
axis.line = element_line(size = 0.2, colour = "gray"),
axis.title = element_text(size = 10),
legend.text = element_text(size = 10),
legend.key=element_blank(),
legend.title = element_blank(),
legend.position = c(0.6,0.1))
corr_prop_rr_sign
ggsave(plot=corr_prop_rr_sign, file="figures/corr_rec_rate.pdf", height = 9, width = 9)
