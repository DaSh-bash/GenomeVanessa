topNodes = length(allGO))
allRes_BP <- GenTable(GO_data_BP,
weight01Fisher = BP_resultFisher_weight01,
classicFisher = BP_resultFisher_classic,
parentChFisher=BP_resultFisher_parentChild,
elimFisher=BP_resultFisher_elim,
orderBy = "parentChFisher",
ranksOf = "parentChFisher",
topNodes = length(allGO))
allRes_BP$elimFisher <- as.numeric(allRes_BP$elimFisher)
allRes_BP[allRes_BP$elimFisher<=0.05, ]
allRes_BP$p_adj_elim <- p.adjust(allRes_BP$elimFisher, method = "fdr")
allRes_BP[allRes_BP$p_adj_elim<=0.05, ]
allRes_BP$parentChFisher <- as.numeric(allRes_BP$parentChFisher)
allRes_BP[allRes_BP$parentChFisher<=0.05, ]
allRes_BP[allRes_BP$elimFisher<=0.05, ]
allRes_BP[allRes_BP$p_adj_elim<=0.05, ]
allRes_BP$p_adj <- p.adjust(allRes_BP$weight01Fisher, method = "fdr")
allRes_BP$p_adj_pc <- p.adjust(allRes_BP$parentChFisher, method = "fdr")
allRes_BP$p_adj_elim <- p.adjust(allRes_BP$elimFisher, method = "fdr")
allRes_BP[allRes_BP$p_adj_pc<=0.05, ]
str(allRes_BP)
allRes_BP <- GenTable(GO_data_BP,
weight01Fisher = BP_resultFisher_weight01,
classicFisher = BP_resultFisher_classic,
parentChFisher=BP_resultFisher_parentChild,
elimFisher=BP_resultFisher_elim,
orderBy = "weight01Fisher",
ranksOf = "weight01Fisher",
topNodes = length(allGO))
allRes_BP[allRes_BP$weight01Fisher<=0.05, ]
length( allRes_BP[allRes_BP$weight01Fisher<=0.05, ])
length( allRes_BP[allRes_BP$weight01Fisher<=0.05, ]$Term)
str(allRes_BP)
allRes_BP$weight01Fisher <- as.numeric(allRes_BP$weight01Fisher)
allRes_BP[allRes_BP$weight01Fisher<=0.05, ]
length( allRes_BP[allRes_BP$weight01Fisher<=0.05, ]$Term)
allRes_BP$weight01Fisher <- as.numeric(allRes_BP$weight01Fisher)
allRes_BP[allRes_BP$weight01Fisher<=0.05, ]
allRes_BP$parentChFisher <- as.numeric(allRes_BP$parentChFisher)
allRes_BP[allRes_BP$parentChFisher<=0.05, ]
allRes_BP$elimFisher <- as.numeric(allRes_BP$elimFisher)
allRes_BP[allRes_BP$elimFisher<=0.05, ]
length( allRes_BP[allRes_BP$weight01Fisher<=0.05, ]$Term)
length( allRes_BP[allRes_BP$parentChFisher<=0.05, ]$Term)
length( allRes_BP[allRes_BP$elimFisher<=0.05, ]$Term)
length( allRes_BP[allRes_BP$weight01Fisher<=0.05 & allRes_BP$parentChFisher<=0.05, ]$Term)
allRes_BP$p_adj <- p.adjust(allRes_BP$weight01Fisher, method = "fdr")
allRes_BP$p_adj_pc <- p.adjust(allRes_BP$parentChFisher, method = "fdr")
allRes_BP$p_adj_elim <- p.adjust(allRes_BP$elimFisher, method = "fdr")
str(allRes_BP)
length( allRes_BP[allRes_BP$p_adj<=0.05 & allRes_BP$p_adj_pc<=0.05, ]$Term)
allRes_BP[allRes_BP$p_adj<=0.05 & allRes_BP$p_adj_pc<=0.05, ]$Term
knitr::opts_chunk$set(echo = TRUE)
#"when only a list of interesting genes is provided,
#the user can use only tests statistics that are based on gene counts,
#like Fisherâ€™s exact test, Z score and alike."
#classic uses all GO terms separately
#elim eliminates genes from parentGOterms if child is more specific (bottom up analysis)
#weight trying to determin if GOterm is better representing the list of interesting genes (is more enriched) than any other node from its neighborhood
#biological process
BP_resultFisher_weight01 <- runTest(GO_data_BP, algorithm = "weight01", statistic = "fisher")
BP_resultFisher_weight01
BP_resultFisher_classic <- runTest(GO_data_BP, algorithm = "classic", statistic = "fisher")
BP_resultFisher_classic
BP_resultFisher_parentChild <- runTest(GO_data_BP, algorithm = "parentChild", statistic = "fisher")
BP_resultFisher_parentChild
BP_resultFisher_elim <- runTest(GO_data_BP, algorithm = "elim", statistic = "fisher")
BP_resultFisher_elim
#allGO = usedGO(object = GOdata)
#topNodes = length(allGO) in GenTable() to get a table with all GO:s to do fdr
allGO = usedGO(object = GO_data_BP)
allRes_BP <- GenTable(GO_data_BP,
weight01Fisher = BP_resultFisher_weight01,
classicFisher = BP_resultFisher_classic,
parentChFisher=BP_resultFisher_parentChild,
elimFisher=BP_resultFisher_elim,
orderBy = "weight01Fisher",
ranksOf = "weight01Fisher",
topNodes = length(allGO))
allRes_BP$weight01Fisher <- as.numeric(allRes_BP$weight01Fisher)
allRes_BP[allRes_BP$weight01Fisher<=0.05, ]
allRes_BP$parentChFisher <- as.numeric(allRes_BP$parentChFisher)
allRes_BP[allRes_BP$parentChFisher<=0.05, ]
allRes_BP$elimFisher <- as.numeric(allRes_BP$elimFisher)
allRes_BP[allRes_BP$elimFisher<=0.05, ]
#multiple test correction, method Benjamini-Hochberg
allRes_BP$p_adj <- p.adjust(allRes_BP$weight01Fisher, method = "fdr")
allRes_BP$p_adj_pc <- p.adjust(allRes_BP$parentChFisher, method = "fdr")
allRes_BP$p_adj_elim <- p.adjust(allRes_BP$elimFisher, method = "fdr")
#adj p-value above 0.05
allRes_BP[allRes_BP$p_adj<=0.05, ]
allRes_BP[allRes_BP$p_adj_pc<=0.05, ]
allRes_BP[allRes_BP$p_adj_elim<=0.05, ]
allRes_BP$GO_class <- "BP"
#cellular compartment
CC_resultFisher_weight01 <- runTest(GO_data_CC, algorithm = "weight01", statistic = "fisher")
CC_resultFisher_weight01
CC_resultFisher_classic <- runTest(GO_data_CC, algorithm = "classic", statistic = "fisher")
CC_resultFisher_classic
CC_resultFisher_parentChild <- runTest(GO_data_CC, algorithm = "parentChild", statistic = "fisher")
CC_resultFisher_parentChild
CC_resultFisher_elim <- runTest(GO_data_CC, algorithm = "elim", statistic = "fisher")
CC_resultFisher_elim
#allGO = usedGO(object = GOdata)
#topNodes = length(allGO) in GenTable() to get a table with all GO:s to do fdr
allGO = usedGO(object = GO_data_CC)
allRes_CC <- GenTable(GO_data_CC,
weight01Fisher = CC_resultFisher_weight01,
classicFisher = CC_resultFisher_classic,
parentChFisher=CC_resultFisher_parentChild,
elimFisher=CC_resultFisher_elim,
orderBy = "weight01Fisher",
ranksOf = "weight01Fisher",
topNodes = length(allGO))
allRes_CC$weight01Fisher <- as.numeric(allRes_CC$weight01Fisher)
allRes_CC[allRes_CC$weight01Fisher<=0.05, ]
allRes_CC$parentChFisher <- as.numeric(allRes_CC$parentChFisher)
allRes_CC[allRes_CC$parentChFisher<=0.05, ]
allRes_CC$elimFisher <- as.numeric(allRes_CC$elimFisher)
allRes_CC[allRes_CC$elimFisher<=0.05, ]
#multiple test correction, method Benjamini-Hochberg
allRes_CC$p_adj <- p.adjust(allRes_CC$weight01Fisher, method = "fdr")
allRes_CC$p_adj_pc <- p.adjust(allRes_CC$parentChFisher, method = "fdr")
allRes_CC$p_adj_elim <- p.adjust(allRes_CC$elimFisher, method = "fdr")
#adj p-value above 0.05
allRes_CC[allRes_CC$p_adj<=0.05, ]
allRes_CC[allRes_CC$p_adj_pc<=0.05, ]
allRes_CC[allRes_CC$p_adj_elim<=0.05, ]
allRes_CC$GO_class <- "CC"
#molecular function
MF_resultFisher_weight01 <- runTest(GO_data_MF, algorithm = "weight01", statistic = "fisher")
MF_resultFisher_weight01
MF_resultFisher_classic <- runTest(GO_data_MF, algorithm = "classic", statistic = "fisher")
MF_resultFisher_classic
MF_resultFisher_parentChild <- runTest(GO_data_MF, algorithm = "parentChild", statistic = "fisher")
MF_resultFisher_parentChild
MF_resultFisher_elim <- runTest(GO_data_MF, algorithm = "elim", statistic = "fisher")
MF_resultFisher_elim
#allGO = usedGO(object = GOdata)
#topNodes = length(allGO) in GenTable() to get a table with all GO:s to do fdr
allGO = usedGO(object = GO_data_MF)
allRes_MF <- GenTable(GO_data_MF,
weight01Fisher = MF_resultFisher_weight01,
classicFisher = MF_resultFisher_classic,
parentChFisher=MF_resultFisher_parentChild,
elimFisher=MF_resultFisher_elim,
orderBy = "weight01Fisher",
ranksOf = "weight01Fisher",
topNodes = length(allGO))
allRes_MF$weight01Fisher <- as.numeric(allRes_MF$weight01Fisher)
allRes_MF[allRes_MF$weight01Fisher<=0.05, ]
allRes_MF$parentChFisher <- as.numeric(allRes_MF$parentChFisher)
allRes_MF[allRes_MF$parentChFisher<=0.05, ]
allRes_MF$elimFisher <- as.numeric(allRes_MF$elimFisher)
allRes_MF[allRes_MF$elimFisher<=0.05, ]
#multiple test correction, method Benjamini-Hochberg
allRes_MF$p_adj <- p.adjust(allRes_MF$weight01Fisher, method = "fdr")
allRes_MF$p_adj_pc <- p.adjust(allRes_MF$parentChFisher, method = "fdr")
allRes_MF$p_adj_elim <- p.adjust(allRes_MF$elimFisher, method = "fdr")
#adj p-value above 0.05
allRes_MF[allRes_MF$p_adj<=0.05, ]
allRes_MF[allRes_MF$p_adj_pc<=0.05, ]
allRes_MF[allRes_MF$p_adj_elim<=0.05, ]
allRes_MF$GO_class <- "MF"
#add gene names per GO (candidate genes)
allRes_BP$genes <- sapply(allRes_BP$GO.ID,
function(x)
{
genes_sel <- genesInTerm(GO_data_BP, x)
genes_sel[[1]][genes_sel[[1]] %in% candidate_genes]
})
allRes_BP$genes <- vapply(allRes_BP$genes, paste, collapse =",", character(1L))
allRes_CC$genes <- sapply(allRes_CC$GO.ID,
function(x)
{
genes_sel <- genesInTerm(GO_data_CC, x)
genes_sel[[1]][genes_sel[[1]] %in% candidate_genes]
})
allRes_CC$genes <- vapply(allRes_CC$genes, paste, collapse =",", character(1L))
allRes_MF$genes <- sapply(allRes_MF$GO.ID,
function(x)
{
genes_sel <- genesInTerm(GO_data_MF, x)
genes_sel[[1]][genes_sel[[1]] %in% candidate_genes]
})
allRes_MF$genes <- vapply(allRes_MF$genes, paste, collapse =",", character(1L))
allRes_MF[allRes_MF$p_adj_pc<=0.05, ]
#adj p-value above 0.05
allRes_MF[allRes_MF$p_adj<=0.05, ]
allRes_MF[allRes_MF$p_adj_elim<=0.05, ]
allRes_MF[allRes_MF$p_adj<=0.05 & allRes_MF$p_adj_pc<=0.05, ]
allRes_BP[allRes_BP$p_adj<=0.05 & allRes_BP$p_adj_pc<=0.05, ]
allRes_CC[allRes_CC$p_adj<=0.05, ]
allRes_CC[allRes_CC$p_adj_pc<=0.05, ]
allRes_CC[allRes_CC$p_adj_elim<=0.05, ]
allRes_CC[allRes_CC$p_adj_pc<=0.05, ]
allRes_all_fdr_pc <- rbind(allRes_BP[allRes_BP$p_adj_pc<=0.05, ], allRes_CC[allRes_CC$p_adj_pc<=0.05, ], allRes_MF[allRes_MF$p_adj_pc<=0.05, ])
allRes_all_fdr_pc$GO_descr <- paste(allRes_all_fdr$Term," (",allRes_all_fdr$GO.ID,")", sep = "")
allRes_all_fdr_pc <- rbind(allRes_BP[allRes_BP$p_adj_pc<=0.05, ], allRes_CC[allRes_CC$p_adj_pc<=0.05, ], allRes_MF[allRes_MF$p_adj_pc<=0.05, ])
allRes_all_fdr_pc$GO_descr <- paste(allRes_all_fdr_pc$Term," (",allRes_all_fdr_pc$GO.ID,")", sep = "")
plot_topGo <- ggplot(allRes_all_fdr_pc, aes(reorder(GO_descr, -Significant), Significant)) +
geom_bar(stat = "identity", aes(fill=GO_class)) +
facet_grid(~GO_class, scales = "free_x", space = "free_x") +
ylab("Number of genes (parentChild)") +
scale_fill_discrete(type=c("#d19200","#4d3500", "#916400"),guide = guide_legend(label.position = "top")) +
theme(panel.background = element_blank(),
strip.background = element_blank(),
strip.text = element_blank(),
axis.line = element_line(size = 0.2, colour = "grey"),
axis.ticks = element_line(size = 0.2, colour = "grey"),
axis.text.x = element_text(size = 10, angle = 90, vjust = 0.5, hjust = 1),
axis.text.y = element_text(size = 10, angle = 90, hjust = 0.5),
axis.title.x = element_blank(),
axis.title.y = element_text(size = 10, angle = 90),
legend.title = element_blank(),
legend.text = element_text(size = 10, angle = 90, vjust = 0.5),
legend.position = c(0.5,0.8),
legend.direction = "horizontal"
)
plot_topGo
#"when only a list of interesting genes is provided,
#the user can use only tests statistics that are based on gene counts,
#like Fisherâ€™s exact test, Z score and alike."
##Algorithms:
#classic uses all GO terms separately
#elim eliminates genes from parentGOterms if child is more specific (bottom up analysis)
#weight trying to determin if GOterm is better representing the list of interesting genes (is more enriched) than any other node from its neighborhood
#parentChild
#biological process
BP_resultFisher_weight01 <- runTest(GO_data_BP, algorithm = "weight01", statistic = "fisher")
BP_resultFisher_weight01
BP_resultFisher_classic <- runTest(GO_data_BP, algorithm = "classic", statistic = "fisher")
BP_resultFisher_classic
BP_resultFisher_parentChild <- runTest(GO_data_BP, algorithm = "parentChild", statistic = "fisher")
BP_resultFisher_parentChild
BP_resultFisher_elim <- runTest(GO_data_BP, algorithm = "elim", statistic = "fisher")
BP_resultFisher_elim
#allGO = usedGO(object = GOdata)
#topNodes = length(allGO) in GenTable() to get a table with all GO:s to do fdr
allGO = usedGO(object = GO_data_BP)
allRes_BP <- GenTable(GO_data_BP,
weight01Fisher = BP_resultFisher_weight01,
classicFisher = BP_resultFisher_classic,
parentChFisher=BP_resultFisher_parentChild,
elimFisher=BP_resultFisher_elim,
orderBy = "weight01Fisher",
ranksOf = "weight01Fisher",
topNodes = length(allGO),
numChar=1000)
allRes_BP$weight01Fisher <- as.numeric(allRes_BP$weight01Fisher)
allRes_BP[allRes_BP$weight01Fisher<=0.05, ]
allRes_BP$parentChFisher <- as.numeric(allRes_BP$parentChFisher)
allRes_BP[allRes_BP$parentChFisher<=0.05, ]
allRes_BP$elimFisher <- as.numeric(allRes_BP$elimFisher)
allRes_BP[allRes_BP$elimFisher<=0.05, ]
#multiple test correction, method Benjamini-Hochberg
allRes_BP$p_adj <- p.adjust(allRes_BP$weight01Fisher, method = "fdr")
allRes_BP$p_adj_pc <- p.adjust(allRes_BP$parentChFisher, method = "fdr")
allRes_BP$p_adj_elim <- p.adjust(allRes_BP$elimFisher, method = "fdr")
#adj p-value above 0.05
allRes_BP[allRes_BP$p_adj<=0.05, ]
allRes_BP[allRes_BP$p_adj_pc<=0.05, ]
allRes_BP[allRes_BP$p_adj_elim<=0.05, ]
allRes_BP$GO_class <- "BP"
#cellular compartment
CC_resultFisher_weight01 <- runTest(GO_data_CC, algorithm = "weight01", statistic = "fisher")
CC_resultFisher_weight01
CC_resultFisher_classic <- runTest(GO_data_CC, algorithm = "classic", statistic = "fisher")
CC_resultFisher_classic
CC_resultFisher_parentChild <- runTest(GO_data_CC, algorithm = "parentChild", statistic = "fisher")
CC_resultFisher_parentChild
CC_resultFisher_elim <- runTest(GO_data_CC, algorithm = "elim", statistic = "fisher")
CC_resultFisher_elim
#allGO = usedGO(object = GOdata)
#topNodes = length(allGO) in GenTable() to get a table with all GO:s to do fdr
allGO = usedGO(object = GO_data_CC)
allRes_CC <- GenTable(GO_data_CC,
weight01Fisher = CC_resultFisher_weight01,
classicFisher = CC_resultFisher_classic,
parentChFisher=CC_resultFisher_parentChild,
elimFisher=CC_resultFisher_elim,
orderBy = "weight01Fisher",
ranksOf = "weight01Fisher",
topNodes = length(allGO),
numChar=1000)
allRes_CC$weight01Fisher <- as.numeric(allRes_CC$weight01Fisher)
allRes_CC[allRes_CC$weight01Fisher<=0.05, ]
allRes_CC$parentChFisher <- as.numeric(allRes_CC$parentChFisher)
allRes_CC[allRes_CC$parentChFisher<=0.05, ]
allRes_CC$elimFisher <- as.numeric(allRes_CC$elimFisher)
allRes_CC[allRes_CC$elimFisher<=0.05, ]
#multiple test correction, method Benjamini-Hochberg
allRes_CC$p_adj <- p.adjust(allRes_CC$weight01Fisher, method = "fdr")
allRes_CC$p_adj_pc <- p.adjust(allRes_CC$parentChFisher, method = "fdr")
allRes_CC$p_adj_elim <- p.adjust(allRes_CC$elimFisher, method = "fdr")
#adj p-value above 0.05
allRes_CC[allRes_CC$p_adj<=0.05, ]
allRes_CC[allRes_CC$p_adj_pc<=0.05, ]
allRes_CC[allRes_CC$p_adj_elim<=0.05, ]
allRes_CC$GO_class <- "CC"
#molecular function
MF_resultFisher_weight01 <- runTest(GO_data_MF, algorithm = "weight01", statistic = "fisher")
MF_resultFisher_weight01
MF_resultFisher_classic <- runTest(GO_data_MF, algorithm = "classic", statistic = "fisher")
MF_resultFisher_classic
MF_resultFisher_parentChild <- runTest(GO_data_MF, algorithm = "parentChild", statistic = "fisher")
MF_resultFisher_parentChild
MF_resultFisher_elim <- runTest(GO_data_MF, algorithm = "elim", statistic = "fisher")
MF_resultFisher_elim
#allGO = usedGO(object = GOdata)
#topNodes = length(allGO) in GenTable() to get a table with all GO:s to do fdr
allGO = usedGO(object = GO_data_MF)
allRes_MF <- GenTable(GO_data_MF,
weight01Fisher = MF_resultFisher_weight01,
classicFisher = MF_resultFisher_classic,
parentChFisher=MF_resultFisher_parentChild,
elimFisher=MF_resultFisher_elim,
orderBy = "weight01Fisher",
ranksOf = "weight01Fisher",
topNodes = length(allGO),
numChar=1000)
allRes_MF$weight01Fisher <- as.numeric(allRes_MF$weight01Fisher)
allRes_MF[allRes_MF$weight01Fisher<=0.05, ]
allRes_MF$parentChFisher <- as.numeric(allRes_MF$parentChFisher)
allRes_MF[allRes_MF$parentChFisher<=0.05, ]
allRes_MF$elimFisher <- as.numeric(allRes_MF$elimFisher)
allRes_MF[allRes_MF$elimFisher<=0.05, ]
#multiple test correction, method Benjamini-Hochberg
allRes_MF$p_adj <- p.adjust(allRes_MF$weight01Fisher, method = "fdr")
allRes_MF$p_adj_pc <- p.adjust(allRes_MF$parentChFisher, method = "fdr")
allRes_MF$p_adj_elim <- p.adjust(allRes_MF$elimFisher, method = "fdr")
#adj p-value above 0.05
allRes_MF[allRes_MF$p_adj<=0.05, ]
allRes_MF[allRes_MF$p_adj_pc<=0.05, ]
allRes_MF[allRes_MF$p_adj_elim<=0.05, ]
allRes_MF$GO_class <- "MF"
#add gene names per GO (candidate genes)
allRes_BP$genes <- sapply(allRes_BP$GO.ID,
function(x)
{
genes_sel <- genesInTerm(GO_data_BP, x)
genes_sel[[1]][genes_sel[[1]] %in% candidate_genes]
})
allRes_BP$genes <- vapply(allRes_BP$genes, paste, collapse =",", character(1L))
allRes_CC$genes <- sapply(allRes_CC$GO.ID,
function(x)
{
genes_sel <- genesInTerm(GO_data_CC, x)
genes_sel[[1]][genes_sel[[1]] %in% candidate_genes]
})
allRes_CC$genes <- vapply(allRes_CC$genes, paste, collapse =",", character(1L))
allRes_MF$genes <- sapply(allRes_MF$GO.ID,
function(x)
{
genes_sel <- genesInTerm(GO_data_MF, x)
genes_sel[[1]][genes_sel[[1]] %in% candidate_genes]
})
allRes_MF$genes <- vapply(allRes_MF$genes, paste, collapse =",", character(1L))
#col_VAR=col_gene
col_vector <- c(col_autosome, col_W, col_Z)
regional_gene_prop <- plot_regional_distribution(rr_repeats_genes_long, occ_length)
regional_gene_prop + facet_wrap(~feature)
regional_gene_prop <- plot_regional_distribution(rr_repeats_genes_long, rr_repeats_genes_long$occ_length)
regional_gene_prop + facet_wrap(~feature)
regional_gene_prop + facet_wrap(~feature, scales = "free_y")
#without W
regional_gene_prop <- plot_regional_distribution(subset(rr_repeats_genes_long, chr_type!="W"), subset(rr_repeats_genes_long, chr_type!="W")$occ_length)
regional_gene_prop + facet_wrap(~feature, scales = "free_y")
regional_gene_prop <- plot_regional_distribution(subset(rr_repeats_genes_long, chr_type!="W" & feature!="rpt"), subset(rr_repeats_genes_long, chr_type!="W" & feature!="rpt")$occ_length)
regional_gene_prop + facet_wrap(~feature, scales = "free_y")
#without W
col_vector <- c(col_autosome, col_Z)
regional_gene_prop <- plot_regional_distribution(subset(rr_repeats_genes_long, chr_type!="W" & feature!="rpt"), subset(rr_repeats_genes_long, chr_type!="W" & feature!="rpt")$occ_length)
regional_gene_prop + facet_wrap(~feature, scales = "free_y")
col_vector <- c(col_autosome, col_W, col_Z)
regional_gene_prop <- plot_regional_distribution(rr_repeats_genes_long, rr_repeats_genes_long$occ_length)
regional_gene_prop + facet_wrap(~feature, scales = "free_y")
#without W
col_vector <- c(col_autosome, col_Z)
regional_gene_prop <- plot_regional_distribution(subset(rr_repeats_genes_long, chr_type!="W" & feature!="rpt"), subset(rr_repeats_genes_long, chr_type!="W" & feature!="rpt")$occ_length)
regional_gene_prop + facet_wrap(~feature, scales = "free_y")
apply(rec_rate[c("map")], 2, table)
round(mean(rec_rate_mean$marker_density))
write(file="../tables/summary_rec_rate.txt", print(paste("Markers in map:", length(rec_rate$mkr))))
write(file="../tables/summary_rec_rate.txt", append = T,
paste("Total map length:", round(sum(rec_rate_mean$map_length),3),
"\nAverage marker density:", mean(rec_rate_mean$marker_density),
"\nMean recombination rate (overall windows):", round(mean(rec_rate$wind_2mb, na.rm = T),3),
"\nsd (overall windows):", round(sd(rec_rate$wind_2mb, na.rm = T),3),
"\nRecombination rate (wind2mb) Z:", round(mean(rec_rate[rec_rate$chr_type=="Z",]$wind_2mb, na.rm = T), 3),
"\nRecombination rate (wind2mb) mean autosomes:", round(mean(rec_rate[rec_rate$chr_type=="Autosome",]$wind_2mb, na.rm = T),3),
"\nRecombination rate (wind2mb) sd autosomes:", round(sd(rec_rate[rec_rate$chr_type=="Autosome",]$wind_2mb, na.rm = T),3)))
write(file="../tables/summary_rec_rate.txt", print(paste("Markers in map:", length(rec_rate$mkr))))
write(file="../tables/summary_rec_rate.txt", append = T,
paste("Total map length:", round(sum(rec_rate_mean$map_length),3),
"\nAverage marker density:", round(mean(rec_rate_mean$marker_density), 3),
"\nMean recombination rate (overall windows):", round(mean(rec_rate$wind_2mb, na.rm = T),3),
"\nsd (overall windows):", round(sd(rec_rate$wind_2mb, na.rm = T),3),
"\nRecombination rate (wind2mb) Z:", round(mean(rec_rate[rec_rate$chr_type=="Z",]$wind_2mb, na.rm = T), 3),
"\nRecombination rate (wind2mb) mean autosomes:", round(mean(rec_rate[rec_rate$chr_type=="Autosome",]$wind_2mb, na.rm = T),3),
"\nRecombination rate (wind2mb) sd autosomes:", round(sd(rec_rate[rec_rate$chr_type=="Autosome",]$wind_2mb, na.rm = T),3)))
unique(rr_repeats_genes_long$chrom)
#proportion without the 4 smallest
corr_prop_rr_red <-
ggplot(data=subset(rr_repeats_genes_long[!rowSums(is.na(rr_repeats_genes_long[c( "wind_2mb")])),], chr_type!="W" & chrom!= "LR999952.1" & "LR999954.1" & "LR999955.1"), aes(occ_length, wind_2mb)) +
geom_point(aes(colour=chr_type, fill=chr_type),shape=21,size=1) +
geom_smooth(aes(colour=chr_type), method = "lm", fullrange=TRUE, se=FALSE) +
stat_cor(aes(colour=chr_type), show.legend=FALSE, label.y = c(14,15.5)) +
facet_wrap(~feature, scales = "free_x") +
coord_cartesian(ylim = c(0,16)) +
scale_colour_discrete(type = c(col_autosome, col_Z)) +
scale_fill_discrete(type = c(col_autosome, col_Z)) +
xlab("Proportion") +
ylab("Recombination rate (cM/Mb)") +
theme(panel.background = element_blank(),
axis.line = element_line(size = 0.2, colour = "gray"),
axis.title = element_text(size = 10),
legend.text = element_text(size = 10),
legend.key=element_blank(),
legend.title = element_blank(),
legend.position = c(0.6,0.1))
#proportion without the 4 smallest
corr_prop_rr_red <-
ggplot(data=subset(rr_repeats_genes_long[!rowSums(is.na(rr_repeats_genes_long[c( "wind_2mb")])),], chr_type!="W" & chrom!= "LR999952.1" & chrom!="LR999954.1" & chrom!="LR999955.1"), aes(occ_length, wind_2mb)) +
geom_point(aes(colour=chr_type, fill=chr_type),shape=21,size=1) +
geom_smooth(aes(colour=chr_type), method = "lm", fullrange=TRUE, se=FALSE) +
stat_cor(aes(colour=chr_type), show.legend=FALSE, label.y = c(14,15.5)) +
facet_wrap(~feature, scales = "free_x") +
coord_cartesian(ylim = c(0,16)) +
scale_colour_discrete(type = c(col_autosome, col_Z)) +
scale_fill_discrete(type = c(col_autosome, col_Z)) +
xlab("Proportion") +
ylab("Recombination rate (cM/Mb)") +
theme(panel.background = element_blank(),
axis.line = element_line(size = 0.2, colour = "gray"),
axis.title = element_text(size = 10),
legend.text = element_text(size = 10),
legend.key=element_blank(),
legend.title = element_blank(),
legend.position = c(0.6,0.1))
corr_prop_rr_red
mean(rr_repeats_genes$wind_2mb)
mean(rr_repeats_genes$wind_2mb, rm.na=T)
summary(rr_repeats_genes$wind_2mb)
mean(rec_rate$wind_2mb, na.rm = T)
summary(rec_rate$wind_2mb, na.rm = T)
max(rec_rate$wind_2mb, na.rm = T)
write(file="../tables/summary_rec_rate.txt", print(paste("Markers in map:", length(rec_rate$mkr))))
write(file="../tables/summary_rec_rate.txt", append = T,
paste("Total map length:", round(sum(rec_rate_mean$map_length),3),
"\nAverage marker density:", round(mean(rec_rate_mean$marker_density), 3),
"\nMean recombination rate (overall windows):", round(mean(rec_rate$wind_2mb, na.rm = T),3),
"\nsd (overall windows):", round(sd(rec_rate$wind_2mb, na.rm = T),3),
"\nMaximum rec rate: ", max(rec_rate$wind_2mb, na.rm = T),
"\nRecombination rate (wind2mb) Z:", round(mean(rec_rate[rec_rate$chr_type=="Z",]$wind_2mb, na.rm = T), 3),
"\nRecombination rate (wind2mb) mean autosomes:", round(mean(rec_rate[rec_rate$chr_type=="Autosome",]$wind_2mb, na.rm = T),3),
"\nRecombination rate (wind2mb) sd autosomes:", round(sd(rec_rate[rec_rate$chr_type=="Autosome",]$wind_2mb, na.rm = T),3)))
sd(rr_repeats_genes$wind_2mb, rm.na=T)
sd(rr_repeats_genes$wind_2mb)
sd(rr_repeats_genes_wide$wind_2mb)
sd(subset(rr_repeats_genes_long[!rowSums(is.na(rr_repeats_genes_long[c( "wind_2mb")])),])
)
subset(rr_repeats_genes_long[!rowSums(is.na(rr_repeats_genes_long[c( "wind_2mb")])),])
subset(rr_repeats_genes_long[!rowSums(is.na(rr_repeats_genes_long[c( "wind_2mb")])),])$wind_2mb
sd(subset(rr_repeats_genes_long[!rowSums(is.na(rr_repeats_genes_long[c( "wind_2mb")])),])$wind_2mb)
maen(subset(rr_repeats_genes_long[!rowSums(is.na(rr_repeats_genes_long[c( "wind_2mb")])),])$wind_2mb)
mean(subset(rr_repeats_genes_long[!rowSums(is.na(rr_repeats_genes_long[c( "wind_2mb")])),])$wind_2mb)
#summary windowbased
write(file="tables/summary_wd_based_rec_rate.txt",
paste("Average rec rate: ",
mean(subset(rr_repeats_genes_long[!rowSums(is.na(rr_repeats_genes_long[c( "wind_2mb")])),])$wind_2mb),
"\nSd: ",
sd(subset(rr_repeats_genes_long[!rowSums(is.na(rr_repeats_genes_long[c( "wind_2mb")])),])$wind_2mb),
"\nMax: ",
max(subset(rr_repeats_genes_long[!rowSums(is.na(rr_repeats_genes_long[c( "wind_2mb")])),])$wind_2mb),
"\nMin: ",
min(subset(rr_repeats_genes_long[!rowSums(is.na(rr_repeats_genes_long[c( "wind_2mb")])),])$wind_2mb)))
corrFunc <- function(var1, var2, data) {
result = cor.test(data[,var1], data[,var2], method="spearman")
data.frame(var1, var2, result[c("estimate","p.value","statistic","method")],
stringsAsFactors=FALSE)
}
COR_TEST <- as.data.frame(rr_repeats_genes_wide[rr_repeats_genes_wide$chr_type!="W",])
## Pairs of variables for which we want correlations
#rec_rate
#vars = data.frame(v1=names(mtcars)[1], v2=names(mtcars)[-1])
vars = data.frame(v1=names((COR_TEST)["loess"]), v2=names(select(COR_TEST, starts_with("occ_"))))
#install.packages("ggpubr")
library(ggplot2)
library(ggpubr)
library(viridis)
library("tidyr")
library(plyr)
library(dplyr)
library(data.table)
library(stringr)
library(car)
library(sjPlot)
library(nord)
library(sjstats)
library(stargazer)
corrFunc <- function(var1, var2, data) {
result = cor.test(data[,var1], data[,var2], method="spearman")
data.frame(var1, var2, result[c("estimate","p.value","statistic","method")],
stringsAsFactors=FALSE)
}
COR_TEST <- as.data.frame(rr_repeats_genes_wide[rr_repeats_genes_wide$chr_type!="W",])
## Pairs of variables for which we want correlations
#rec_rate
#vars = data.frame(v1=names(mtcars)[1], v2=names(mtcars)[-1])
vars = data.frame(v1=names((COR_TEST)["loess"]), v2=names(select(COR_TEST, starts_with("occ_"))))
